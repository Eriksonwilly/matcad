#!/usr/bin/env python3
"""
Script de prueba para verificar las correcciones implementadas
en APP.py para resolver problemas de PDF y Matplotlib en producci√≥n.
"""

import sys
import os

def test_imports():
    """Probar que todas las importaciones funcionan correctamente"""
    print("üîç Probando importaciones...")
    
    try:
        import streamlit as st
        print("‚úÖ Streamlit importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Streamlit: {e}")
        return False
    
    try:
        import numpy as np
        print("‚úÖ NumPy importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando NumPy: {e}")
        return False
    
    try:
        import pandas as pd
        print("‚úÖ Pandas importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Pandas: {e}")
        return False
    
    try:
        import matplotlib
        # Configurar backend antes de importar pyplot
        matplotlib.use('Agg')  # Backend no interactivo para Streamlit
        import matplotlib.pyplot as plt
        print("‚úÖ Matplotlib configurado y importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Matplotlib: {e}")
        return False
    
    try:
        import plotly.express as px
        import plotly.graph_objects as go
        print("‚úÖ Plotly importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando Plotly: {e}")
        return False
    
    try:
        from reportlab.lib.pagesizes import A4, letter
        from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph, Spacer, PageBreak, Image
        from reportlab.lib import colors
        from reportlab.lib.styles import getSampleStyleSheet
        from reportlab.lib.units import inch
        print("‚úÖ ReportLab importado correctamente")
    except ImportError as e:
        print(f"‚ùå Error importando ReportLab: {e}")
        return False
    
    return True

def test_matplotlib_backend():
    """Probar que el backend de Matplotlib funciona correctamente"""
    print("\nüîç Probando backend de Matplotlib...")
    
    try:
        import matplotlib
        matplotlib.use('Agg')  # Backend no interactivo para Streamlit
        import matplotlib.pyplot as plt
        
        # Crear una figura simple
        fig, ax = plt.subplots(figsize=(8, 6))
        ax.plot([1, 2, 3, 4], [1, 4, 2, 3])
        ax.set_title("Prueba de Matplotlib")
        ax.set_xlabel("X")
        ax.set_ylabel("Y")
        
        # Guardar la figura
        fig.savefig('test_matplotlib.png', dpi=100, bbox_inches='tight')
        plt.close(fig)
        
        # Verificar que el archivo se cre√≥
        if os.path.exists('test_matplotlib.png'):
            print("‚úÖ Matplotlib backend funciona correctamente")
            os.remove('test_matplotlib.png')  # Limpiar
            return True
        else:
            print("‚ùå Error: No se pudo crear el archivo de imagen")
            return False
            
    except Exception as e:
        print(f"‚ùå Error probando Matplotlib: {e}")
        return False

def test_pdf_generation():
    """Probar la generaci√≥n de PDF con ReportLab"""
    print("\nüîç Probando generaci√≥n de PDF...")
    
    try:
        from reportlab.lib.pagesizes import A4
        from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer
        from reportlab.lib.styles import getSampleStyleSheet
        import io
        
        # Crear buffer de memoria
        pdf_buffer = io.BytesIO()
        doc = SimpleDocTemplate(pdf_buffer, pagesize=A4)
        styles = getSampleStyleSheet()
        elements = []
        
        # Agregar contenido
        elements.append(Paragraph("Prueba de PDF - CONSORCIO DEJ", styles["Heading1"]))
        elements.append(Spacer(1, 12))
        elements.append(Paragraph("Este es un PDF de prueba generado con ReportLab.", styles["Normal"]))
        
        # Construir PDF
        doc.build(elements)
        pdf_buffer.seek(0)
        
        # Verificar que el PDF tiene contenido
        pdf_content = pdf_buffer.getvalue()
        if len(pdf_content) > 0:
            print("‚úÖ Generaci√≥n de PDF funciona correctamente")
            return True
        else:
            print("‚ùå Error: PDF generado est√° vac√≠o")
            return False
            
    except Exception as e:
        print(f"‚ùå Error generando PDF: {e}")
        return False

def test_app_import():
    """Probar que APP.py se puede importar sin errores"""
    print("\nüîç Probando importaci√≥n de APP.py...")
    
    try:
        # Simular el entorno de Streamlit
        import sys
        sys.path.append('.')
        
        # Importar funciones espec√≠ficas de APP.py
        from APP import (
            calcular_propiedades_concreto,
            calcular_propiedades_acero,
            generar_pdf_reportlab
        )
        
        # Probar funciones b√°sicas
        props_concreto = calcular_propiedades_concreto(210)
        props_acero = calcular_propiedades_acero(4200)
        
        if props_concreto and props_acero:
            print("‚úÖ APP.py se puede importar y las funciones b√°sicas funcionan")
            return True
        else:
            print("‚ùå Error: Las funciones b√°sicas no retornan valores v√°lidos")
            return False
            
    except Exception as e:
        print(f"‚ùå Error importando APP.py: {e}")
        return False

def main():
    """Funci√≥n principal de pruebas"""
    print("üöÄ Iniciando pruebas de correcciones...")
    print("=" * 50)
    
    tests = [
        ("Importaciones", test_imports),
        ("Backend Matplotlib", test_matplotlib_backend),
        ("Generaci√≥n PDF", test_pdf_generation),
        ("Importaci√≥n APP.py", test_app_import)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\nüìã Ejecutando: {test_name}")
        if test_func():
            passed += 1
        else:
            print(f"‚ö†Ô∏è Test fall√≥: {test_name}")
    
    print("\n" + "=" * 50)
    print(f"üìä Resultados: {passed}/{total} pruebas pasaron")
    
    if passed == total:
        print("üéâ ¬°Todas las pruebas pasaron! Las correcciones est√°n funcionando correctamente.")
        print("\n‚úÖ Problemas resueltos:")
        print("   - Configuraci√≥n de Matplotlib backend 'Agg'")
        print("   - Generaci√≥n de PDF con ReportLab")
        print("   - Eliminaci√≥n de st.rerun() problem√°tico")
        print("   - Importaciones optimizadas")
        return True
    else:
        print("‚ùå Algunas pruebas fallaron. Revisar las dependencias.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 