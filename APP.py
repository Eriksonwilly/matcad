import streamlit as st
import numpy as np
import pandas as pd
import plotly.graph_objects as go
from math import sqrt
from datetime import datetime
import hashlib
import io
import base64
from reportlab.lib.pagesizes import A4
from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle
from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
from reportlab.lib.units import inch
from reportlab.lib import colors
from reportlab.lib.enums import TA_CENTER, TA_LEFT, TA_RIGHT

# ===== CONFIGURACI√ìN PARA M√ìVIL/APK =====
# Optimizaciones para dispositivos m√≥viles
st.set_page_config(
    page_title="CONSORCIO DEJ - An√°lisis Estructural",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="collapsed",  # Sidebar colapsado en m√≥vil
    menu_items={
        'Get Help': 'https://consorciodej.com/help',
        'Report a bug': 'https://consorciodej.com/bug',
        'About': 'CONSORCIO DEJ v2.0 - An√°lisis Estructural Profesional'
    }
)

# CSS optimizado para m√≥vil
st.markdown("""
<style>
    /* Optimizaciones para m√≥vil */
    @media (max-width: 768px) {
        .main-header {
            padding: 15px !important;
            font-size: 18px !important;
        }
        .metric-card {
            padding: 15px !important;
            margin: 10px 0 !important;
        }
        .calculate-button {
            padding: 15px !important;
            margin: 20px 0 !important;
        }
    }
    
    .main-header {
        text-align: center;
        padding: 25px;
        background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
        color: #2F2F2F;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .metric-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #1e3c72;
        margin: 15px 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .success-box {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 2px solid #28a745;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    .warning-box {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        border: 2px solid #ffc107;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    .error-box {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 2px solid #dc3545;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    .calculate-button {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: 30px 0;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }
    .section-header {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 20px 0;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Importar sistema de pagos simple
try:
    from simple_payment_system import payment_system
    PAYMENT_SYSTEM_AVAILABLE = True
except ImportError:
    PAYMENT_SYSTEM_AVAILABLE = False
    st.warning("‚ö†Ô∏è Sistema de pagos no disponible. Usando modo demo.")

# ===== FUNCIONES DE C√ÅLCULO SEG√öN ACI 318-2025 =====

def calcular_propiedades_concreto(fc):
    """
    Calcula propiedades del concreto seg√∫n ACI 318-2025 - Cap√≠tulo 19
    """
    # M√≥dulo de elasticidad (Ec)
    Ec = 15000 * sqrt(fc)  # kg/cm¬≤
    
    # Deformaci√≥n √∫ltima del concreto (Œµcu)
    ecu = 0.003  # Para dise√±o por flexi√≥n
    
    # Resistencia a tracci√≥n por flexi√≥n (fr)
    fr = 2 * sqrt(fc)  # kg/cm¬≤
    
    # Factor Œ≤1 para bloque de compresi√≥n
    if fc <= 280:
        beta1 = 0.85
    else:
        beta1 = 0.85 - 0.05 * ((fc - 280) / 70)
        beta1 = max(beta1, 0.65)  # L√≠mite m√≠nimo
    
    return {
        'Ec': Ec,
        'ecu': ecu,
        'fr': fr,
        'beta1': beta1
    }

def calcular_propiedades_acero(fy):
    """
    Calcula propiedades del acero seg√∫n ACI 318-2025 - Cap√≠tulo 20
    """
    # M√≥dulo de elasticidad del acero
    Es = 2000000  # kg/cm¬≤
    
    # Deformaci√≥n de fluencia (Œµy)
    ey = fy / Es
    
    return {
        'Es': Es,
        'ey': ey
    }

def calcular_cuantias_balanceada(fc, fy, beta1):
    """
    Calcula cuant√≠a balanceada seg√∫n ACI 318-2025 - Cap√≠tulo 9
    """
    # Cuant√≠a balanceada (œÅb)
    rho_b = 0.85 * beta1 * (fc / fy) * (6000 / (6000 + fy))
    
    # Cuant√≠a m√≠nima (œÅmin)
    rho_min = max(0.8 * sqrt(fc) / fy, 14 / fy)
    
    # Cuant√≠a m√°xima (œÅmax) - Para evitar falla fr√°gil
    rho_max = 0.75 * rho_b
    
    # Cuant√≠a m√°xima recomendada por McCormac para ductilidad
    rho_max_mccormac = 0.025
    
    return {
        'rho_b': rho_b,
        'rho_min': rho_min,
        'rho_max': rho_max,
        'rho_max_mccormac': rho_max_mccormac
    }

def calcular_diseno_flexion(Mu, b, d, fc, fy, beta1):
    """
    Dise√±o por flexi√≥n seg√∫n ACI 318-2025 - Cap√≠tulo 9
    """
    phi = 0.9  # Factor de reducci√≥n para flexi√≥n
    
    # Calcular cuant√≠as
    cuantias = calcular_cuantias_balanceada(fc, fy, beta1)
    
    # Iteraci√≥n para As
    a_estimado = d / 5
    As_estimado = Mu / (phi * fy * (d - a_estimado/2))
    
    # Calcular a real
    a_real = (As_estimado * fy) / (0.85 * fc * b)
    
    # As corregido
    As_corregido = Mu / (phi * fy * (d - a_real/2))
    
    # Cuant√≠a provista
    rho_provisto = As_corregido / (b * d)
    
    # Verificar cuant√≠as
    cumple_cuantia_min = rho_provisto >= cuantias['rho_min']
    cumple_cuantia_max = rho_provisto <= cuantias['rho_max']
    cumple_mccormac = rho_provisto <= cuantias['rho_max_mccormac']
    
    # Momento resistente
    Mn = As_corregido * fy * (d - a_real/2)
    phiMn = phi * Mn
    
    return {
        'As': As_corregido,
        'a': a_real,
        'rho_provisto': rho_provisto,
        'cumple_cuantia_min': cumple_cuantia_min,
        'cumple_cuantia_max': cumple_cuantia_max,
        'cumple_mccormac': cumple_mccormac,
        'Mn': Mn,
        'phiMn': phiMn,
        'cuantias': cuantias
    }

def calcular_diseno_cortante(Vu, b, d, fc, fy):
    """
    Dise√±o por cortante seg√∫n ACI 318-2025 - Cap√≠tulo 22
    """
    phi_v = 0.75  # Factor de reducci√≥n para cortante
    
    # Resistencia del concreto (Vc)
    Vc = 0.53 * sqrt(fc) * b * d
    
    # Cortante m√°ximo que puede resistir el acero (Vs m√°x)
    Vs_max = 2.1 * sqrt(fc) * b * d
    
    # Separaci√≥n m√°xima de estribos
    s_max = min(d/2, 60)  # cm
    
    # Si Vu > œÜVc, se requiere acero de cortante
    requiere_acero = Vu > phi_v * Vc
    
    if requiere_acero:
        # Cortante que debe resistir el acero
        Vs_requerido = (Vu / phi_v) - Vc
        
        # Verificar l√≠mite superior
        if Vs_requerido > Vs_max:
            requiere_rediseno = True
        else:
            requiere_rediseno = False
    else:
        Vs_requerido = 0
        requiere_rediseno = False
    
    return {
        'Vc': Vc,
        'Vs_max': Vs_max,
        's_max': s_max,
        'requiere_acero': requiere_acero,
        'Vs_requerido': Vs_requerido,
        'requiere_rediseno': requiere_rediseno,
        'phi_v': phi_v
    }

def calcular_diseno_columna(Pu, fc, fy, Ag, Ast=0):
    """
    Dise√±o de columnas seg√∫n ACI 318-2025 - Cap√≠tulo 10
    """
    phi_col = 0.65  # Factor de reducci√≥n para columnas con estribos
    
    # Cuant√≠as m√≠nimas y m√°ximas
    rho_min_col = 0.01  # 1%
    rho_max_col = 0.06  # 6%
    
    # √Årea de acero m√≠nima y m√°xima
    As_min_col = rho_min_col * Ag
    As_max_col = rho_max_col * Ag
    
    # Resistencia nominal (Pn)
    Pn = 0.80 * (0.85 * fc * (Ag - Ast) + fy * Ast)
    
    # Resistencia de dise√±o
    phiPn = phi_col * Pn
    
    # Verificar capacidad
    cumple_capacidad = Pu <= phiPn
    
    return {
        'Pn': Pn,
        'phiPn': phiPn,
        'As_min_col': As_min_col,
        'As_max_col': As_max_col,
        'cumple_capacidad': cumple_capacidad,
        'phi_col': phi_col
    }

def calcular_diseno_losa(L, fy):
    """
    Dise√±o de losas seg√∫n ACI 318-2025 - Cap√≠tulo 8 & E.060
    """
    # Espesor m√≠nimo de losa aligerada
    h_min = max(L / 25, 0.17)  # m, no menor a 17 cm
    
    # Refuerzo m√≠nimo en losas
    if fy == 4200:
        rho_min_losa = 0.0018
    else:
        rho_min_losa = 0.8 * sqrt(210) / fy  # Aproximado
    
    # Separaci√≥n m√°xima del acero
    s_max_losa = min(3 * h_min * 100, 45)  # cm
    
    return {
        'h_min': h_min,
        'rho_min_losa': rho_min_losa,
        's_max_losa': s_max_losa
    }

def calcular_analisis_sismico(P_edificio, num_pisos, h_piso, zona_sismica, tipo_suelo, 
                            tipo_estructura, factor_importancia):
    """
    An√°lisis s√≠smico seg√∫n E.030 & ACI 318-2025 - Cap√≠tulo 18
    """
    # Factores s√≠smicos
    factores_Z = {"Z1": 0.10, "Z2": 0.20, "Z3": 0.30, "Z4": 0.45}
    Z = factores_Z[zona_sismica]
    
    factores_R = {"P√≥rticos": 8.0, "Muros Estructurales": 6.0, "Dual": 7.0}
    R = factores_R[tipo_estructura]
    
    factores_S = {"S1": 1.0, "S2": 1.2, "S3": 1.4, "S4": 1.6}
    S = factores_S[tipo_suelo]
    
    # Per√≠odo fundamental
    T = 0.1 * num_pisos
    
    # Coeficiente de amplificaci√≥n s√≠smica
    if tipo_suelo == "S1":
        C = 2.5 * (1.0/T)**0.8
    else:
        C = 2.5 * (1.0/T)
    
    # Cortante basal
    V = (Z * factor_importancia * C * S * P_edificio) / R
    
    # Distribuci√≥n de fuerzas
    Fx = []
    sum_h = sum([i*h_piso for i in range(1, num_pisos+1)])
    for i in range(1, num_pisos+1):
        Fx.append(V * (i*h_piso)/sum_h)
    
    # Deriva m√°xima permitida
    deriva_max = 0.007 * h_piso  # Para edificios regulares
    
    return {
        'T': T,
        'C': C,
        'V': V,
        'Fx': Fx,
        'deriva_max': deriva_max,
        'Z': Z,
        'R': R,
        'S': S
    }

def calcular_predimensionamiento_completo(L_viga, num_pisos, num_vanos, CM, CV, fc, fy):
    """
    Predimensionamiento completo seg√∫n E.060 Art. 10.2 y ACI 318-2025
    """
    # Propiedades del concreto
    props_concreto = calcular_propiedades_concreto(fc)
    
    # Dise√±o de losa
    diseno_losa = calcular_diseno_losa(L_viga, fy)
    h_losa = diseno_losa['h_min']
    
    # Vigas
    d_viga = L_viga * 100 / 10  # cm
    b_viga = max(0.3 * d_viga, 25)  # cm
    
    # Columnas
    P_servicio = num_pisos * (CM + 0.25*CV) * (L_viga*num_vanos)**2
    P_mayorada = num_pisos * (1.2*CM + 1.6*CV) * (L_viga*num_vanos)**2
    
    # √Årea de columna por servicio
    A_col_servicio = P_servicio / (0.45*fc)
    
    # √Årea de columna por resistencia
    A_col_resistencia = P_mayorada / (0.65*0.8*fc)
    
    # Usar el mayor
    A_columna = max(A_col_servicio, A_col_resistencia)
    lado_columna = sqrt(A_columna)
    
    return {
        'h_losa': h_losa,
        'd_viga': d_viga,
        'b_viga': b_viga,
        'lado_columna': lado_columna,
        'A_columna': A_columna,
        'P_servicio': P_servicio,
        'P_mayorada': P_mayorada,
        'props_concreto': props_concreto,
        'diseno_losa': diseno_losa
    }

# Configuraci√≥n de la p√°gina
st.set_page_config(
    page_title="CONSORCIO DEJ - An√°lisis Estructural Profesional",
    page_icon="üèóÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS personalizado profesional
st.markdown("""
<style>
    .main-header {
        text-align: center;
        padding: 25px;
        background: linear-gradient(135deg, #FFD700 0%, #FFA500 100%);
        color: #2F2F2F;
        border-radius: 15px;
        margin-bottom: 30px;
        box-shadow: 0 4px 15px rgba(0,0,0,0.1);
    }
    .metric-card {
        background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);
        padding: 20px;
        border-radius: 10px;
        border-left: 5px solid #1e3c72;
        margin: 15px 0;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .success-box {
        background: linear-gradient(135deg, #d4edda 0%, #c3e6cb 100%);
        border: 2px solid #28a745;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    .warning-box {
        background: linear-gradient(135deg, #fff3cd 0%, #ffeaa7 100%);
        border: 2px solid #ffc107;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    .error-box {
        background: linear-gradient(135deg, #f8d7da 0%, #f5c6cb 100%);
        border: 2px solid #dc3545;
        border-radius: 10px;
        padding: 15px;
        margin: 15px 0;
    }
    .calculate-button {
        background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
        color: white;
        padding: 20px;
        border-radius: 15px;
        text-align: center;
        margin: 30px 0;
        box-shadow: 0 4px 15px rgba(40, 167, 69, 0.3);
    }
    .section-header {
        background: linear-gradient(135deg, #6c757d 0%, #495057 100%);
        color: white;
        padding: 15px;
        border-radius: 10px;
        margin: 20px 0;
        text-align: center;
    }
</style>
""", unsafe_allow_html=True)

# Sistema de autenticaci√≥n y planes
def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()

def check_credentials(username, password):
    valid_users = {
        "admin": hash_password("admin123"),
        "consorcio": hash_password("dej2024"),
        "ingeniero": hash_password("structural"),
        "demo": hash_password("demo123"),
        "premium": hash_password("premium"),
        "empresarial": hash_password("empresarial")
    }
    return username in valid_users and valid_users[username] == hash_password(password)

def get_user_plan(username):
    """Obtener el plan del usuario"""
    plan_mapping = {
        "admin": "empresarial",
        "consorcio": "empresarial", 
        "ingeniero": "premium",
        "demo": "basico",
        "premium": "premium",
        "empresarial": "empresarial"
    }
    return plan_mapping.get(username, "basico")

def show_payment_form(plan):
    """Mostrar formulario de pago"""
    st.subheader(f"üí≥ Pago - Plan {plan.title()}")
    
    # Verificar si hay usuario logueado
    if 'username' not in st.session_state:
        st.warning("‚ö†Ô∏è Debes iniciar sesi√≥n o registrarte primero")
        st.info("üìù Ve a la pesta√±a 'Registrarse' para crear una cuenta")
        return
    
    payment_method = st.selectbox(
        "M√©todo de pago",
        ["yape", "plin", "paypal", "transferencia", "efectivo"],
        format_func=lambda x: {
            "yape": "üì± Yape (M√°s R√°pido)",
            "plin": "üì± PLIN",
            "paypal": "üí≥ PayPal",
            "transferencia": "üè¶ Transferencia Bancaria", 
            "efectivo": "üíµ Pago en Efectivo"
        }[x]
    )
    
    if st.button("Procesar Pago", type="primary"):
        if PAYMENT_SYSTEM_AVAILABLE:
            try:
                # Usar email del usuario actual
                user_email = st.session_state.get('user_email', 'demo@consorciodej.com')
                result = payment_system.upgrade_plan(user_email, plan, payment_method)
                
                if result["success"]:
                    st.success("‚úÖ Pago procesado correctamente")
                    st.info("üìã Instrucciones de pago:")
                    st.text(result["instructions"])
                    
                    # Mostrar informaci√≥n adicional
                    st.info("üì± Env√≠a el comprobante de pago a WhatsApp: +51 999 888 777")
                    
                    # Verificar si fue confirmado autom√°ticamente
                    if result.get("auto_confirmed"):
                        st.success("üéâ ¬°Plan activado inmediatamente!")
                        st.info("‚úÖ Pago confirmado autom√°ticamente")
                        
                        # Actualizar plan en session state
                        st.session_state['plan'] = plan
                        
                        # Bot√≥n para continuar con acceso completo
                        if st.button("üöÄ Continuar con Acceso Completo", key="continue_full_access"):
                            st.rerun()
                    else:
                        st.info("‚è∞ Activaci√≥n en 2 horas m√°ximo")
                        st.info("üîÑ Recarga la p√°gina despu√©s de 2 horas")
                else:
                    st.error(f"‚ùå Error: {result['message']}")
            except Exception as e:
                st.error(f"‚ùå Error en el sistema de pagos: {str(e)}")
                st.info("üîÑ Intenta nuevamente o contacta soporte")
        else:
            st.error("‚ùå Sistema de pagos no disponible")
            st.info("üîß Contacta al administrador para activar el sistema")

def show_pricing_page():
    """Mostrar p√°gina de precios y planes"""
    st.title("üí∞ Planes y Precios - CONSORCIO DEJ")
    
    # Verificar si es administrador
    is_admin = st.session_state.get('username') == 'admin'
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.subheader("üÜì Plan B√°sico")
        st.write("**$0/mes**")
        st.write("‚úÖ C√°lculos b√°sicos")
        st.write("‚úÖ An√°lisis simple")
        st.write("‚úÖ Reportes b√°sicos")
        st.write("‚ùå Sin an√°lisis completo")
        st.write("‚ùå Sin dise√±o del fuste")
        st.write("‚ùå Sin gr√°ficos avanzados")
        
        if st.button("Seleccionar B√°sico", key="basic_plan"):
            if is_admin:
                st.session_state['plan'] = "basico"
                st.success("‚úÖ Plan b√°sico activado para administrador")
                st.rerun()
            else:
                st.info("Ya tienes acceso al plan b√°sico")
    
    with col2:
        st.subheader("‚≠ê Plan Premium")
        st.write("**$29.99/mes**")
        st.write("‚úÖ Todo del plan b√°sico")
        st.write("‚úÖ An√°lisis completo")
        st.write("‚úÖ Dise√±o del fuste")
        st.write("‚úÖ Gr√°ficos avanzados")
        st.write("‚úÖ Reportes PDF")
        st.write("‚ùå Sin soporte empresarial")
        
        if st.button("Actualizar a Premium", key="premium_plan"):
            if is_admin:
                # Acceso directo para administrador
                st.session_state['plan'] = "premium"
                st.success("‚úÖ Plan Premium activado para administrador")
                st.rerun()
            elif PAYMENT_SYSTEM_AVAILABLE:
                show_payment_form("premium")
            else:
                st.info("Sistema de pagos no disponible en modo demo")
    
    with col3:
        st.subheader("üè¢ Plan Empresarial")
        st.write("**$99.99/mes**")
        st.write("‚úÖ Todo del plan premium")
        st.write("‚úÖ Soporte prioritario")
        st.write("‚úÖ M√∫ltiples proyectos")
        st.write("‚úÖ Reportes personalizados")
        st.write("‚úÖ Capacitaci√≥n incluida")
        st.write("‚úÖ API de integraci√≥n")
        
        if st.button("Actualizar a Empresarial", key="business_plan"):
            if is_admin:
                # Acceso directo para administrador
                st.session_state['plan'] = "empresarial"
                st.success("‚úÖ Plan Empresarial activado para administrador")
                st.rerun()
            elif PAYMENT_SYSTEM_AVAILABLE:
                show_payment_form("empresarial")
            else:
                st.info("Sistema de pagos no disponible en modo demo")
    
    # Panel especial para administrador
    if is_admin:
        st.markdown("---")
        st.subheader("üë®‚Äçüíº Panel de Administrador")
        st.info("Como administrador, puedes cambiar tu plan directamente sin pasar por el sistema de pagos.")
        
        col1, col2, col3 = st.columns(3)
        with col1:
            if st.button("üÜì Activar Plan B√°sico", key="admin_basic"):
                st.session_state['plan'] = "basico"
                st.success("‚úÖ Plan b√°sico activado")
                st.rerun()
        
        with col2:
            if st.button("‚≠ê Activar Plan Premium", key="admin_premium"):
                st.session_state['plan'] = "premium"
                st.success("‚úÖ Plan premium activado")
                st.rerun()
        
        with col3:
            if st.button("üè¢ Activar Plan Empresarial", key="admin_enterprise"):
                st.session_state['plan'] = "empresarial"
                st.success("‚úÖ Plan empresarial activado")
                st.rerun()

# Funci√≥n para generar PDF profesional optimizada para Streamlit Cloud
def generar_pdf_profesional(datos_proyecto, resultados_analisis):
    try:
        buffer = io.BytesIO()
        
        # Configuraci√≥n del documento con m√°rgenes m√°s peque√±os para optimizar espacio
        doc = SimpleDocTemplate(
            buffer,
            pagesize=A4,
            leftMargin=0.5*inch,
            rightMargin=0.5*inch,
            topMargin=0.5*inch,
            bottomMargin=0.5*inch
        )
        
        story = []
        styles = getSampleStyleSheet()
        
        # Estilo para el t√≠tulo principal optimizado
        title_style = ParagraphStyle(
            'TitleStyle',
            parent=styles['Heading1'],
            fontSize=16,
            alignment=TA_CENTER,
            textColor=colors.HexColor('#1e3c72'),
            spaceAfter=20,
            fontName='Helvetica-Bold'
        )
        
        # Estilo para encabezados de secci√≥n
        heading_style = ParagraphStyle(
            'HeadingStyle',
            parent=styles['Heading2'],
            fontSize=12,
            textColor=colors.HexColor('#1e3c72'),
            spaceAfter=10,
            fontName='Helvetica-Bold'
        )
        
        # Estilo para texto normal
        normal_style = ParagraphStyle(
            'NormalStyle',
            parent=styles['Normal'],
            fontSize=9,
            spaceAfter=6,
            fontName='Helvetica'
        )
        
        # Encabezado del documento
        story.append(Paragraph("CONSORCIO DEJ - REPORTE ESTRUCTURAL", title_style))
        story.append(Spacer(1, 15))
        
        # Informaci√≥n b√°sica en tabla compacta
        info_data = [
            ["Fecha:", datos_proyecto['fecha']],
            ["Usuario:", datos_proyecto['usuario']],
            ["Proyecto:", "An√°lisis Estructural"],
            ["Software:", "CONSORCIO DEJ v2.0"]
        ]
        
        info_table = Table(info_data, colWidths=[1.5*inch, 4*inch])
        info_table.setStyle(TableStyle([
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('VALIGN', (0, 0), (-1, -1), 'MIDDLE'),
            ('ALIGN', (0, 0), (0, -1), 'LEFT'),
            ('ALIGN', (1, 0), (1, -1), 'LEFT'),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        story.append(info_table)
        story.append(Spacer(1, 15))
        
        # Secci√≥n de Materiales
        story.append(Paragraph("MATERIALES", heading_style))
        
        materials_data = [
            ["Propiedad", "Valor", "Unidad"],
            ["f'c (Concreto)", f"{datos_proyecto['fc']}", "kg/cm¬≤"],
            ["fy (Acero)", f"{datos_proyecto['fy']}", "kg/cm¬≤"],
            ["M√≥dulo Elasticidad", f"{datos_proyecto['E']:.0f}", "kg/cm¬≤"]
        ]
        
        materials_table = Table(materials_data, colWidths=[2*inch, 1.5*inch, 1*inch])
        materials_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        story.append(materials_table)
        story.append(Spacer(1, 10))
        
        # Secci√≥n de Geometr√≠a y Cargas
        story.append(Paragraph("GEOMETR√çA Y CARGAS", heading_style))
        
        geometry_data = [
            ["Par√°metro", "Valor", "Unidad"],
            ["Luz libre de vigas", f"{datos_proyecto['L_viga']}", "m"],
            ["Altura de piso", f"{datos_proyecto['h_piso']}", "m"],
            ["N√∫mero de pisos", f"{datos_proyecto['num_pisos']}", ""],
            ["N√∫mero de vanos", f"{datos_proyecto['num_vanos']}", ""],
            ["Carga muerta (CM)", f"{datos_proyecto['CM']}", "kg/m¬≤"],
            ["Carga viva (CV)", f"{datos_proyecto['CV']}", "kg/m¬≤"]
        ]
        
        geometry_table = Table(geometry_data, colWidths=[2*inch, 1.5*inch, 1*inch])
        geometry_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        story.append(geometry_table)
        story.append(Spacer(1, 10))
        
        # Secci√≥n de Predimensionamiento
        story.append(Paragraph("PREDIMENSIONAMIENTO (E.060 Art. 10.2)", heading_style))
        
        predim_data = [
            ["Elemento", "Propiedad", "Valor", "Unidad"],
            ["Losas", "Espesor m√≠nimo", f"{resultados_analisis['h_losa']:.0f}", "cm"],
            ["Vigas", "Peralte efectivo", f"{resultados_analisis['d_viga']:.0f}", "cm"],
            ["Vigas", "Ancho de viga", f"{resultados_analisis['b_viga']:.0f}", "cm"],
            ["Columnas", "Lado de columna", f"{resultados_analisis['lado_columna']:.0f}", "cm"],
            ["Columnas", "√Årea de columna", f"{resultados_analisis['A_columna']:.0f}", "cm¬≤"]
        ]
        
        predim_table = Table(predim_data, colWidths=[1.5*inch, 1.5*inch, 1*inch, 0.8*inch])
        predim_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        story.append(predim_table)
        story.append(Spacer(1, 10))
        
        # Secci√≥n de An√°lisis S√≠smico
        story.append(Paragraph("AN√ÅLISIS S√çSMICO (E.030)", heading_style))
        
        sismo_data = [
            ["Par√°metro", "Valor", "Unidad"],
            ["Peso total del edificio", f"{resultados_analisis['P_edificio']:.1f}", "ton"],
            ["Per√≠odo fundamental", f"{resultados_analisis['T']:.2f}", "s"],
            ["Coeficiente de amplificaci√≥n", f"{resultados_analisis['C']:.3f}", ""],
            ["Cortante basal", f"{resultados_analisis['V']:.1f}", "ton"],
            ["Zona s√≠smica", datos_proyecto['zona_sismica'], ""],
            ["Tipo de suelo", datos_proyecto['tipo_suelo'], ""]
        ]
        
        sismo_table = Table(sismo_data, colWidths=[2*inch, 1.5*inch, 1*inch])
        sismo_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 4),
        ]))
        story.append(sismo_table)
        story.append(Spacer(1, 10))
        
        # Secci√≥n de Dise√±o Estructural
        story.append(Paragraph("DISE√ëO ESTRUCTURAL (E.060 & ACI 318-2025)", heading_style))
        
        dise√±o_data = [
            ["Elemento", "Propiedad", "Valor", "Unidad"],
            ["Viga - Flexi√≥n", "Momento √∫ltimo", f"{resultados_analisis['M_u']:.1f}", "kgf¬∑m"],
            ["Viga - Flexi√≥n", "Acero requerido", f"{resultados_analisis['A_s_corr']:.2f}", "cm¬≤"],
            ["Viga - Cortante", "Cortante √∫ltimo", f"{resultados_analisis['V_u']:.1f}", "kg"],
            ["Columna", "Carga axial mayorada", f"{resultados_analisis['P_u']:.1f}", "ton"],
            ["Columna", "Acero m√≠nimo", f"{resultados_analisis['As_min']:.1f}", "cm¬≤"]
        ]
        
        dise√±o_table = Table(dise√±o_data, colWidths=[1.5*inch, 1.5*inch, 1*inch, 0.8*inch])
        dise√±o_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        story.append(dise√±o_table)
        story.append(Spacer(1, 10))
        
        # Secci√≥n de Verificaciones de Seguridad con Referencias Normativas
        story.append(Paragraph("VERIFICACIONES DE SEGURIDAD CON REFERENCIAS NORMATIVAS", heading_style))
        
        # Verificaciones de vigas con referencias normativas
        story.append(Paragraph("VERIFICACI√ìN DE VIGAS - FLEXI√ìN", ParagraphStyle(name='SubHeading', fontSize=10, textColor=colors.HexColor('#1e3c72'), spaceAfter=8)))
        
        viga_verificaciones = [
            ["Verificaci√≥n", "Estado", "Norma", "Art√≠culo/Secci√≥n"],
            ["Cuant√≠a m√≠nima de acero", '‚úì CUMPLE' if resultados_analisis['cumple_cuantia'] else '‚úó NO CUMPLE', "E.060 & ACI 318-2025", "E.060 Art. 10.5.1 / ACI 9.6.1"],
            ["Cuant√≠a m√°xima de acero", '‚úì CUMPLE' if resultados_analisis['rho_provisto'] <= resultados_analisis['rho_max_viga'] else '‚úó NO CUMPLE', "E.060 & ACI 318-2025", "E.060 Art. 10.3.3 / ACI 9.3.3"],
            ["Resistencia a flexi√≥n", '‚úì CUMPLE', "E.060 & ACI 318-2025", "E.060 Art. 10.3 / ACI 9.3"],
            ["Factor de reducci√≥n œÜ", f"œÜ = {resultados_analisis['phi']}", "E.060 & ACI 318-2025", "E.060 Art. 9.3.2 / ACI 9.3"]
        ]
        
        viga_table = Table(viga_verificaciones, colWidths=[1.5*inch, 1*inch, 1.5*inch, 1.5*inch])
        viga_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        story.append(viga_table)
        story.append(Spacer(1, 8))
        
        # Verificaciones de columnas con referencias normativas
        story.append(Paragraph("VERIFICACI√ìN DE COLUMNAS - COMPRESI√ìN", ParagraphStyle(name='SubHeading', fontSize=10, textColor=colors.HexColor('#1e3c72'), spaceAfter=8)))
        
        columna_verificaciones = [
            ["Verificaci√≥n", "Estado", "Norma", "Art√≠culo/Secci√≥n"],
            ["Resistencia axial", '‚úì CUMPLE' if resultados_analisis['cumple_columna'] else '‚úó NO CUMPLE', "E.060 & ACI 318-2025", "E.060 Art. 10.3.6 / ACI 9.3.2"],
            ["Cuant√≠a m√≠nima de acero", '‚úì CUMPLE', "E.060 & ACI 318-2025", "E.060 Art. 10.9.1 / ACI 9.6.1"],
            ["Cuant√≠a m√°xima de acero", '‚úì CUMPLE', "E.060 & ACI 318-2025", "E.060 Art. 10.9.1 / ACI 9.6.1"],
            ["Factor de reducci√≥n œÜ", f"œÜ = {resultados_analisis['phi_col']}", "E.060 & ACI 318-2025", "E.060 Art. 9.3.2 / ACI 9.3"]
        ]
        
        columna_table = Table(columna_verificaciones, colWidths=[1.5*inch, 1*inch, 1.5*inch, 1.5*inch])
        columna_table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
            ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 1, colors.black),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
        ]))
        story.append(columna_table)
        story.append(Spacer(1, 10))
        
        # === PAR√ÅMETROS NORMATIVOS SEG√öN ACI 318-2025 ===
        st.markdown("""
        <div class="section-header">
            <h2>üìã PAR√ÅMETROS NORMATIVOS - ACI 318-2025</h2>
        </div>
        """, unsafe_allow_html=True)
        
        # Par√°metros de vigas seg√∫n ACI 318-2025
        st.markdown("""
        <div class="metric-card">
            <h4>üèóÔ∏è PAR√ÅMETROS DE DISE√ëO PARA VIGAS (ACI 318-2025 - Cap√≠tulo 9)</h4>
            <p><strong>Cuant√≠a m√≠nima œÅmin:</strong> """ + f"{diseno_flexion['cuantias']['rho_min']:.4f}" + """ (ACI 9.6.1: œÅmin ‚â• 0.8‚àöf'c/fy)</p>
            <p><strong>Cuant√≠a m√°xima œÅmax:</strong> """ + f"{diseno_flexion['cuantias']['rho_max']:.4f}" + """ (ACI 9.3.3: œÅmax ‚â§ 0.75œÅb)</p>
            <p><strong>Cuant√≠a balanceada œÅb:</strong> """ + f"{diseno_flexion['cuantias']['rho_b']:.4f}" + """ (ACI 9.3.3: œÅb = 0.85Œ≤‚ÇÅf'c/fy √ó 6000/(6000+fy))</p>
            <p><strong>Cuant√≠a provista œÅ:</strong> """ + f"{rho_provisto:.4f}" + """ (ACI 9.3: Dise√±o por flexi√≥n)</p>
            <p><strong>Factor de reducci√≥n œÜ:</strong> """ + f"{phi}" + """ (ACI 9.3: œÜ = 0.9 para flexi√≥n)</p>
            <p><strong>Factor Œ≤‚ÇÅ:</strong> """ + f"{props_concreto['beta1']:.3f}" + """ (ACI 9.3.3: Œ≤‚ÇÅ = 0.85 si f'c ‚â§ 280 kg/cm¬≤)</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Par√°metros de columnas seg√∫n ACI 318-2025
        st.markdown("""
        <div class="metric-card">
            <h4>üèóÔ∏è PAR√ÅMETROS DE DISE√ëO PARA COLUMNAS (ACI 318-2025 - Cap√≠tulo 10)</h4>
            <p><strong>Cuant√≠a m√≠nima œÅmin:</strong> 0.01 (1%) (ACI 10.9.1: œÅmin ‚â• 0.01)</p>
            <p><strong>Cuant√≠a m√°xima œÅmax:</strong> 0.06 (6%) (ACI 10.9.1: œÅmax ‚â§ 0.06)</p>
            <p><strong>Factor de reducci√≥n œÜ:</strong> """ + f"{phi_col}" + """ (ACI 10.3.6: œÜ = 0.65 para columnas con estribos)</p>
            <p><strong>Resistencia nominal Pn:</strong> """ + f"{diseno_columna['Pn']/1000:.1f}" + """ ton (ACI 10.3.6: Pn = 0.80[0.85f'c(Ag-Ast)+fyAst])</p>
            <p><strong>Resistencia de dise√±o œÜPn:</strong> """ + f"{diseno_columna['phiPn']/1000:.1f}" + """ ton</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Par√°metros de cortante seg√∫n ACI 318-2025
        st.markdown("""
        <div class="metric-card">
            <h4>üî© PAR√ÅMETROS DE DISE√ëO POR CORTANTE (ACI 318-2025 - Cap√≠tulo 22)</h4>
            <p><strong>Resistencia del concreto Vc:</strong> """ + f"{V_c:.1f}" + """ kg (ACI 22.5.5.1: Vc = 0.53‚àöf'c√ób√ód)</p>
            <p><strong>Cortante m√°ximo Vs:</strong> """ + f"{V_s_max:.1f}" + """ kg (ACI 22.5.1.2: Vs ‚â§ 2.1‚àöf'c√ób√ód)</p>
            <p><strong>Factor de reducci√≥n œÜ:</strong> """ + f"{diseno_cortante['phi_v']}" + """ (ACI 21.2.1: œÜ = 0.75 para cortante)</p>
            <p><strong>Separaci√≥n m√°xima:</strong> """ + f"{diseno_cortante['s_max']:.0f}" + """ cm (ACI 25.7.2.2: s ‚â§ d/2 o 60 cm)</p>
            <p><strong>Requiere acero:</strong> """ + ('S√ç' if requiere_acero_cortante else 'NO') + """ (ACI 22.5.1.1: Si Vu > œÜVc)</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Propiedades de materiales seg√∫n ACI 318-2025
        st.markdown("""
        <div class="metric-card">
            <h4>üèóÔ∏è PROPIEDADES DE MATERIALES (ACI 318-2025)</h4>
            <p><strong>Concreto - M√≥dulo Ec:</strong> """ + f"{props_concreto['Ec']:.0f}" + """ kg/cm¬≤ (ACI 19.2.2.1: Ec = 15000‚àöf'c)</p>
            <p><strong>Concreto - Deformaci√≥n Œµcu:</strong> """ + f"{props_concreto['ecu']}" + """ (ACI 22.2.2.1: Œµcu = 0.003)</p>
            <p><strong>Concreto - Resistencia fr:</strong> """ + f"{props_concreto['fr']:.1f}" + """ kg/cm¬≤ (ACI 19.2.3.1: fr = 2‚àöf'c)</p>
            <p><strong>Acero - M√≥dulo Es:</strong> """ + f"{props_acero['Es']:,}" + """ kg/cm¬≤ (ACI 20.2.2.1: Es = 2,000,000)</p>
            <p><strong>Acero - Deformaci√≥n Œµy:</strong> """ + f"{props_acero['ey']:.4f}" + """ (ACI 20.2.2.1: Œµy = fy/Es)</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Bot√≥n para mostrar f√≥rmulas detalladas
        if st.button("üìö VER F√ìRMULAS DETALLADAS ACI 318-2025", type="secondary", use_container_width=True):
            st.markdown("""
            <div class="section-header">
                <h3>üìö F√ìRMULAS DETALLADAS ACI 318-2025</h3>
            </div>
            """, unsafe_allow_html=True)
            
            # F√≥rmulas de propiedades de materiales
            st.markdown("""
            <div class="metric-card">
                <h4>üèóÔ∏è PROPIEDADES DEL CONCRETO (ACI 318-2025 - Cap√≠tulo 19)</h4>
                <p><strong>Resistencia a compresi√≥n (f'c):</strong> """ + f"{f_c}" + """ kg/cm¬≤</p>
                <p><strong>M√≥dulo de elasticidad (Ec):</strong> Ec = 15000‚àöf'c = """ + f"{props_concreto['Ec']:.0f}" + """ kg/cm¬≤</p>
                <p><strong>Deformaci√≥n √∫ltima (Œµcu):</strong> Œµcu = 0.003 (Para dise√±o por flexi√≥n)</p>
                <p><strong>Resistencia a tracci√≥n (fr):</strong> fr = 2‚àöf'c = """ + f"{props_concreto['fr']:.1f}" + """ kg/cm¬≤</p>
                <p><strong>Factor Œ≤‚ÇÅ:</strong> Œ≤‚ÇÅ = 0.85 si f'c ‚â§ 280 kg/cm¬≤ = """ + f"{props_concreto['beta1']:.3f}" + """</p>
            </div>
            """, unsafe_allow_html=True)
            
            # F√≥rmulas de propiedades del acero
            st.markdown("""
            <div class="metric-card">
                <h4>üî© PROPIEDADES DEL ACERO (ACI 318-2025 - Cap√≠tulo 20)</h4>
                <p><strong>Esfuerzo de fluencia (fy):</strong> """ + f"{f_y}" + """ kg/cm¬≤</p>
                <p><strong>M√≥dulo de elasticidad (Es):</strong> Es = 2,000,000 kg/cm¬≤</p>
                <p><strong>Deformaci√≥n de fluencia (Œµy):</strong> Œµy = fy/Es = """ + f"{props_acero['ey']:.4f}" + """</p>
            </div>
            """, unsafe_allow_html=True)
            
            # F√≥rmulas de dise√±o por flexi√≥n
            st.markdown("""
            <div class="metric-card">
                <h4>üèóÔ∏è DISE√ëO POR FLEXI√ìN (ACI 318-2025 - Cap√≠tulo 9)</h4>
                <p><strong>Momento √∫ltimo (Mu):</strong> Mu = 1.2MD + 1.6ML = """ + f"{M_u/100:.1f}" + """ kgf¬∑m</p>
                <p><strong>Cuant√≠a balanceada (œÅb):</strong> œÅb = 0.85Œ≤‚ÇÅ(f'c/fy)(6000/(6000+fy)) = """ + f"{diseno_flexion['cuantias']['rho_b']:.4f}" + """</p>
                <p><strong>Cuant√≠a m√≠nima (œÅmin):</strong> œÅmin = max(0.8‚àöf'c/fy, 14/fy) = """ + f"{diseno_flexion['cuantias']['rho_min']:.4f}" + """</p>
                <p><strong>Cuant√≠a m√°xima (œÅmax):</strong> œÅmax = 0.75œÅb = """ + f"{diseno_flexion['cuantias']['rho_max']:.4f}" + """</p>
                <p><strong>Cuant√≠a provista (œÅ):</strong> œÅ = As/(b√ód) = """ + f"{rho_provisto:.4f}" + """</p>
                <p><strong>Profundidad del bloque (a):</strong> a = As√ófy/(0.85√óf'c√ób) = """ + f"{diseno_flexion['a']:.1f}" + """ cm</p>
                <p><strong>Momento resistente (œÜMn):</strong> œÜMn = œÜ√óAs√ófy√ó(d-a/2) = """ + f"{diseno_flexion['phiMn']/100:.1f}" + """ kgf¬∑m</p>
            </div>
            """, unsafe_allow_html=True)
            
            # F√≥rmulas de dise√±o por cortante
            st.markdown("""
            <div class="metric-card">
                <h4>üî© DISE√ëO POR CORTANTE (ACI 318-2025 - Cap√≠tulo 22)</h4>
                <p><strong>Cortante √∫ltimo (Vu):</strong> Vu = 1.2VD + 1.6VL = """ + f"{V_u:.1f}" + """ kg</p>
                <p><strong>Resistencia del concreto (Vc):</strong> Vc = 0.53‚àöf'c√ób√ód = """ + f"{V_c:.1f}" + """ kg</p>
                <p><strong>Cortante m√°ximo (Vs m√°x):</strong> Vs ‚â§ 2.1‚àöf'c√ób√ód = """ + f"{V_s_max:.1f}" + """ kg</p>
                <p><strong>Separaci√≥n m√°xima:</strong> s ‚â§ d/2 o 60 cm = """ + f"{diseno_cortante['s_max']:.0f}" + """ cm</p>
                <p><strong>Requiere acero:</strong> """ + ('S√ç' if requiere_acero_cortante else 'NO') + """ (Si Vu > œÜVc)</p>
            </div>
            """, unsafe_allow_html=True)
            
            # F√≥rmulas de dise√±o de columnas
            st.markdown("""
            <div class="metric-card">
                <h4>üèóÔ∏è DISE√ëO DE COLUMNAS (ACI 318-2025 - Cap√≠tulo 10)</h4>
                <p><strong>Carga axial √∫ltima (Pu):</strong> Pu = 1.2PD + 1.6PL = """ + f"{P_u/1000:.1f}" + """ ton</p>
                <p><strong>Resistencia nominal (Pn):</strong> Pn = 0.80[0.85f'c(Ag-Ast)+fyAst] = """ + f"{diseno_columna['Pn']/1000:.1f}" + """ ton</p>
                <p><strong>Resistencia de dise√±o (œÜPn):</strong> œÜPn = œÜ√óPn = """ + f"{diseno_columna['phiPn']/1000:.1f}" + """ ton</p>
                <p><strong>Refuerzo m√≠nimo:</strong> As ‚â• 0.01√óAg = """ + f"{As_min:.1f}" + """ cm¬≤ (1%)</p>
                <p><strong>Refuerzo m√°ximo:</strong> As ‚â§ 0.06√óAg = """ + f"{As_max:.1f}" + """ cm¬≤ (6%)</p>
            </div>
            """, unsafe_allow_html=True)
            
            # F√≥rmulas de an√°lisis s√≠smico
            st.markdown("""
            <div class="metric-card">
                <h4>üåé AN√ÅLISIS S√çSMICO (E.030 & ACI 318-2025 - Cap√≠tulo 18)</h4>
                <p><strong>Cortante basal (V):</strong> V = Z√óU√óC√óS√óP/R = """ + f"{V/1000:.1f}" + """ ton</p>
                <p><strong>Per√≠odo fundamental (T):</strong> T = 0.1√óN = """ + f"{T:.2f}" + """ s</p>
                <p><strong>Coeficiente s√≠smico (C):</strong> C = 2.5√ó(1.0/T) = """ + f"{C:.3f}" + """</p>
                <p><strong>Deriva m√°xima:</strong> Œîmax = 0.007√óh = """ + f"{0.007 * h_piso * 100:.2f}" + """ %</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.success("‚úÖ F√≥rmulas ACI 318-2025 mostradas correctamente")
        
        # Conclusiones con Referencias Normativas Espec√≠ficas
        story.append(Paragraph("CONCLUSIONES Y RECOMENDACIONES CON REFERENCIAS NORMATIVAS", heading_style))
        conclusiones = [
            "1. El predimensionamiento cumple con las especificaciones de la Norma E.060 Art. 10.2 (Predimensionamiento)",
            "2. El an√°lisis s√≠smico se realiz√≥ seg√∫n la Norma E.030 (Dise√±o Sismorresistente)",
            "3. El dise√±o estructural sigue los criterios de ACI 318-2025 (Building Code Requirements)",
            "4. Se verificaron las cuant√≠as m√≠nimas (E.060 Art. 10.5.1 / ACI 9.6.1) y m√°ximas (E.060 Art. 10.3.3 / ACI 9.3.3) de acero",
            "5. La estructura cumple con los requisitos de seguridad seg√∫n E.060 Art. 9.3.2 y ACI 9.3 (Factores de reducci√≥n)",
            "6. Las vigas cumplen con el dise√±o por flexi√≥n seg√∫n E.060 Art. 10.3 y ACI 9.3",
            "7. Las columnas cumplen con el dise√±o por compresi√≥n seg√∫n E.060 Art. 10.3.6 y ACI 9.3.2",
            "8. Los factores de reducci√≥n œÜ aplicados son: œÜ = 0.9 para flexi√≥n y œÜ = 0.65 para compresi√≥n"
        ]
        
        for conclusion in conclusiones:
            story.append(Paragraph(conclusion, normal_style))
        
        story.append(Spacer(1, 15))
        
        # Firmas
        story.append(Paragraph("FIRMAS Y APROBACIONES", heading_style))
        firmas_data = [
            ["INGENIERO CALCULISTA:", "_________________", f"FECHA: {datos_proyecto['fecha']}"],
            ["INGENIERO REVISOR:", "_________________", f"FECHA: {datos_proyecto['fecha']}"],
            ["DIRECTOR DE OBRA:", "_________________", f"FECHA: {datos_proyecto['fecha']}"]
        ]
        
        firmas_table = Table(firmas_data, colWidths=[2*inch, 2*inch, 2*inch])
        firmas_table.setStyle(TableStyle([
            ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
            ('FONTNAME', (0, 0), (-1, -1), 'Helvetica'),
            ('FONTSIZE', (0, 0), (-1, -1), 9),
            ('BOTTOMPADDING', (0, 0), (-1, -1), 8),
            ('GRID', (0, 0), (-1, -1), 0.5, colors.grey)
        ]))
        story.append(firmas_table)
        story.append(Spacer(1, 15))
        
        # Pie de p√°gina con Referencias Normativas Completas
        story.append(Paragraph("<hr/>", normal_style))
        story.append(Paragraph("CONSORCIO DEJ - Ingenier√≠a y Construcci√≥n", normal_style))
        story.append(Paragraph("Software de An√°lisis Estructural Profesional", normal_style))
        story.append(Paragraph("Normas Aplicadas:", normal_style))
        story.append(Paragraph("‚Ä¢ üáµüá™ E.060 - Concreto Armado (Per√∫)", normal_style))
        story.append(Paragraph("‚Ä¢ üáµüá™ E.030 - Dise√±o Sismorresistente (Per√∫)", normal_style))
        story.append(Paragraph("‚Ä¢ üá∫üá∏ ACI 318-2025 - Building Code Requirements for Structural Concrete", normal_style))
        story.append(Paragraph("Generado autom√°ticamente por CONSORCIO DEJ", 
                             ParagraphStyle(name='Footer', fontSize=8, alignment=TA_CENTER)))
        
        # Construir el PDF
        doc.build(story)
        buffer.seek(0)
        return buffer
        
    except Exception as e:
        st.error(f"Error al generar PDF: {str(e)}")
        return None

# Verificar autenticaci√≥n
if 'authenticated' not in st.session_state:
    st.session_state.authenticated = False

# P√°gina de login con pesta√±as
if not st.session_state.authenticated:
    st.markdown("""
    <div class="main-header">
        <h1>üèóÔ∏è CONSORCIO DEJ</h1>
        <p style="font-size: 20px; font-weight: bold;">Ingenier√≠a y Construcci√≥n</p>
        <p style="font-size: 16px;">Software de An√°lisis Estructural Profesional</p>
        <p style="font-size: 14px;">ACI 318-2025 & E.060 | E.030</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Pesta√±as para login y planes
    tab1, tab2, tab3 = st.tabs(["üîê Iniciar Sesi√≥n", "üìù Registrarse", "üí∞ Planes y Precios"])
    
    with tab1:
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            st.markdown("""
            <div style="background-color: #f8f9fa; padding: 30px; border-radius: 15px; border: 2px solid #dee2e6;">
                <h2 style="text-align: center; color: #1e3c72;">üîê Acceso al Sistema</h2>
                <p style="text-align: center; color: #666;">Ingresa tus credenciales para continuar</p>
            </div>
            """, unsafe_allow_html=True)
            
            with st.form("login_form"):
                username = st.text_input("üë§ Email", placeholder="tuemail@gmail.com")
                password = st.text_input("üîí Contrase√±a", type="password", placeholder="Ingresa tu contrase√±a")
                submitted = st.form_submit_button("üöÄ Iniciar Sesi√≥n", type="primary")
                
                if submitted:
                    # Verificar credenciales especiales primero
                    if username == "admin" and password == "admin123":
                        st.session_state.authenticated = True
                        st.session_state.username = "admin"
                        st.session_state.plan = "empresarial"
                        st.success("‚úÖ ¬°Bienvenido Administrador!")
                        st.rerun()
                    elif username == "demo" and password == "demo123":
                        st.session_state.authenticated = True
                        st.session_state.username = "demo"
                        st.session_state.plan = "basico"
                        st.success("‚úÖ ¬°Bienvenido al modo demo!")
                        st.rerun()
                    elif PAYMENT_SYSTEM_AVAILABLE:
                        # Sistema real de pagos
                        result = payment_system.login_user(username, password)
                        if result["success"]:
                            st.session_state.authenticated = True
                            st.session_state.username = result["user"]["name"]
                            st.session_state.plan = result["user"]["plan"]
                            st.success(f"‚úÖ ¬°Bienvenido, {result['user']['name']}!")
                            st.rerun()
                        else:
                            st.error(f"‚ùå {result['message']}")
                    else:
                        st.error("‚ùå Sistema de pagos no disponible. Usa credenciales de demo.")
            
            with st.expander("‚ÑπÔ∏è Credenciales de Prueba"):
                st.write("**Usuarios disponibles:**")
                st.write("‚Ä¢ Email: `admin` | Contrase√±a: `admin123` (Empresarial)")
                st.write("‚Ä¢ Email: `demo` | Contrase√±a: `demo123` (B√°sico)")
                if PAYMENT_SYSTEM_AVAILABLE:
                    st.write("‚Ä¢ Registra tu cuenta para acceder al sistema completo")
    
    with tab2:
        st.subheader("üìù Crear Cuenta")
        with st.form("register_form"):
            new_name = st.text_input("Nombre completo", placeholder="Tu nombre completo")
            new_email = st.text_input("Email", placeholder="tuemail@gmail.com")
            new_password = st.text_input("Contrase√±a", type="password", placeholder="M√≠nimo 6 caracteres")
            confirm_password = st.text_input("Confirmar Contrase√±a", type="password")
            submitted = st.form_submit_button("üìù Registrarse", type="primary")
            
            if submitted:
                if not new_name or not new_email or not new_password:
                    st.error("‚ùå Todos los campos son obligatorios")
                elif new_password != confirm_password:
                    st.error("‚ùå Las contrase√±as no coinciden")
                elif len(new_password) < 6:
                    st.error("‚ùå La contrase√±a debe tener al menos 6 caracteres")
                else:
                    if PAYMENT_SYSTEM_AVAILABLE:
                        result = payment_system.register_user(new_email, new_password, new_name)
                        if result["success"]:
                            st.success("‚úÖ " + result["message"])
                            st.info("üîê Ahora puedes iniciar sesi√≥n y actualizar tu plan")
                            
                            # Auto-login despu√©s del registro
                            login_result = payment_system.login_user(new_email, new_password)
                            if login_result["success"]:
                                st.session_state.authenticated = True
                                st.session_state.username = login_result["user"]["name"]
                                st.session_state.plan = login_result["user"]["plan"]
                                st.success(f"üéâ ¬°Bienvenido, {login_result['user']['name']}!")
                                st.info("üí∞ Ve a 'Planes y Precios' para actualizar tu plan")
                                st.rerun()
                        else:
                            st.error("‚ùå " + result["message"])
                    else:
                        st.success("‚úÖ Registro simulado exitoso")
                        st.info("üîë Usa las credenciales de demo para acceder")
    
    with tab3:
        show_pricing_page()
    
    st.stop()

# Funci√≥n para actualizar plan del usuario
def update_user_plan():
    """Actualizar plan del usuario desde el sistema de pagos"""
    if PAYMENT_SYSTEM_AVAILABLE and 'user_email' in st.session_state:
        try:
            user_email = st.session_state['user_email']
            if user_email and user_email not in ['admin', 'demo']:
                real_plan = payment_system.get_user_plan(user_email)
                current_plan = real_plan.get('plan', 'basico')
                
                # Actualizar session state si el plan cambi√≥
                if st.session_state.get('plan') != current_plan:
                    st.session_state['plan'] = current_plan
                    return True
        except Exception as e:
            pass
    return False

# Aplicaci√≥n principal
if st.session_state.authenticated:
    # Actualizar plan del usuario autom√°ticamente
    plan_updated = update_user_plan()
    if plan_updated:
        st.success("üéâ ¬°Tu plan ha sido actualizado!")
        st.rerun()
    # Header profesional
    st.markdown("""
    <div class="main-header">
        <h1>üèóÔ∏è CONSORCIO DEJ</h1>
        <p style="font-size: 20px; font-weight: bold;">Ingenier√≠a y Construcci√≥n</p>
        <p style="font-size: 16px;">Software de An√°lisis Estructural Profesional</p>
        <p style="font-size: 14px;">Usuario: """ + st.session_state.username.upper() + """</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar con navegaci√≥n y datos de entrada
    with st.sidebar:
        st.header("üë§ Usuario Actual")
        st.success(f"**{st.session_state.username.upper()}**")
        
        # Mostrar plan actual
        plan = st.session_state.get('plan', 'basico')
        if plan == "basico":
            st.info("üÜì Plan B√°sico")
        elif plan == "premium":
            st.success("‚≠ê Plan Premium")
        else:
            st.success("üè¢ Plan Empresarial")
        
        # Panel de administrador para cambiar plan
        if st.session_state.username in ['admin', 'consorcio']:
            st.markdown("---")
            st.subheader("üë®‚Äçüíº Panel de Administrador")
            col1, col2, col3 = st.columns(3)
            with col1:
                if st.button("üÜì B√°sico", key="admin_basic"):
                    st.session_state['plan'] = "basico"
                    st.success("‚úÖ Plan b√°sico activado")
                    st.rerun()
            with col2:
                if st.button("‚≠ê Premium", key="admin_premium"):
                    st.session_state['plan'] = "premium"
                    st.success("‚úÖ Plan premium activado")
                    st.rerun()
            with col3:
                if st.button("üè¢ Empresarial", key="admin_enterprise"):
                    st.session_state['plan'] = "empresarial"
                    st.success("‚úÖ Plan empresarial activado")
                    st.rerun()
        
        if st.button("üö™ Cerrar Sesi√≥n"):
            st.session_state.authenticated = False
            st.rerun()
        
        st.markdown("---")
        st.header("üìã Men√∫ Principal")
        
        # Navegaci√≥n principal
        opcion = st.sidebar.selectbox("Selecciona una opci√≥n", 
                                     ["üèóÔ∏è C√°lculo B√°sico", "üìä An√°lisis Completo", "üìÑ Generar Reporte", "üìà Gr√°ficos", "‚ÑπÔ∏è Acerca de", "‚úâÔ∏è Contacto"])
        
        st.markdown("---")
        st.header("üìä Datos del Proyecto")
        
        # Materiales
        st.subheader("üèóÔ∏è Materiales")
        f_c = st.number_input("Resistencia del concreto f'c (kg/cm¬≤)", 
                             min_value=175, max_value=700, value=210, step=10, key="f_c_input")
        f_y = st.number_input("Esfuerzo de fluencia del acero fy (kg/cm¬≤)", 
                             min_value=2800, max_value=6000, value=4200, step=100, key="f_y_input")
        
        # Guardar en session state
        st.session_state['f_c'] = f_c
        st.session_state['f_y'] = f_y
        
        # Geometr√≠a
        st.subheader("üìê Geometr√≠a")
        L_viga = st.number_input("Luz libre de vigas (m)", 
                                min_value=3.0, max_value=15.0, value=6.0, step=0.5, key="L_viga_input")
        h_piso = st.number_input("Altura de piso (m)", 
                                min_value=2.5, max_value=5.0, value=3.0, step=0.1, key="h_piso_input")
        num_pisos = st.number_input("N√∫mero de pisos", 
                                   min_value=1, max_value=100, value=15, step=1, key="num_pisos_input")
        num_vanos = st.number_input("N√∫mero de vanos en direcci√≥n X", 
                                   min_value=1, max_value=20, value=3, step=1, key="num_vanos_input")
        
        # Guardar en session state
        st.session_state['L_viga'] = L_viga
        st.session_state['h_piso'] = h_piso
        st.session_state['num_pisos'] = num_pisos
        st.session_state['num_vanos'] = num_vanos
        
        # Cargas
        st.subheader("‚öñÔ∏è Cargas")
        CM = st.number_input("Carga Muerta (kg/m¬≤)", 
                            min_value=100, max_value=2000, value=150, step=50, key="CM_input")
        CV = st.number_input("Carga Viva (kg/m¬≤)", 
                            min_value=100, max_value=1000, value=200, step=50, key="CV_input")
        
        # Guardar en session state
        st.session_state['CM'] = CM
        st.session_state['CV'] = CV
        
        # Par√°metros s√≠smicos
        st.subheader("üåé Par√°metros S√≠smicos")
        zona_sismica = st.selectbox("Zona S√≠smica", ["Z1", "Z2", "Z3", "Z4"], index=2, key="zona_sismica_input")
        tipo_suelo = st.selectbox("Tipo de Suelo", ["S1", "S2", "S3", "S4"], index=1, key="tipo_suelo_input")
        tipo_estructura = st.selectbox("Tipo de Sistema Estructural", 
                                      ["P√≥rticos", "Muros Estructurales", "Dual"], index=0, key="tipo_estructura_input")
        factor_importancia = st.number_input("Factor de Importancia (U)", 
                                           min_value=1.0, max_value=1.5, value=1.0, step=0.1, key="factor_importancia_input")
        
        # Guardar en session state
        st.session_state['zona_sismica'] = zona_sismica
        st.session_state['tipo_suelo'] = tipo_suelo
        st.session_state['tipo_estructura'] = tipo_estructura
        st.session_state['factor_importancia'] = factor_importancia
    
    # √Årea principal - Navegaci√≥n por opciones
    if opcion == "üèóÔ∏è C√°lculo B√°sico":
        st.title("üèóÔ∏è C√°lculo B√°sico de An√°lisis Estructural")
        st.info("Plan b√°sico: C√°lculos fundamentales de estructuras")
        
        # Pesta√±as para diferentes tipos de c√°lculos
        tab1, tab2, tab3 = st.tabs(["üìè Geometr√≠a", "üèóÔ∏è Materiales", "‚öñÔ∏è Cargas"])
        
        with tab1:
            st.subheader("Dimensiones de la Estructura")
            col1, col2 = st.columns(2)
            with col1:
                altura_edificio = st.number_input("Altura total del edificio (m)", min_value=3.0, max_value=300.0, value=45.0, step=1.0)
                num_niveles = st.number_input("N√∫mero de niveles", min_value=1, max_value=100, value=15, step=1)
            with col2:
                area_planta = st.number_input("√Årea de planta (m¬≤)", min_value=50.0, max_value=10000.0, value=500.0, step=50.0)
                peso_especifico = st.number_input("Peso espec√≠fico del concreto (kg/m¬≥)", min_value=2000, max_value=3000, value=2400, step=50)
        
        with tab2:
            st.subheader("Propiedades de los Materiales")
            col1, col2 = st.columns(2)
            with col1:
                resistencia_concreto = st.number_input("Resistencia del concreto (kg/cm¬≤)", min_value=175, max_value=700, value=210, step=10)
                modulo_elasticidad = st.number_input("M√≥dulo de elasticidad (kg/cm¬≤)", min_value=100000, max_value=500000, value=217370, step=1000)
            with col2:
                resistencia_acero = st.number_input("Resistencia del acero (kg/cm¬≤)", min_value=2800, max_value=6000, value=4200, step=100)
                factor_seguridad = st.number_input("Factor de seguridad", min_value=1.2, max_value=3.0, value=1.5, step=0.1)
        
        with tab3:
            st.subheader("Cargas y Factores de Seguridad")
            col1, col2 = st.columns(2)
            with col1:
                carga_muerta = st.number_input("Carga muerta (kg/m¬≤)", min_value=100, max_value=2000, value=150, step=50)
                carga_viva = st.number_input("Carga viva (kg/m¬≤)", min_value=100, max_value=1000, value=200, step=50)
            with col2:
                sismo = st.checkbox("Considerar sismo", value=True)
                viento = st.checkbox("Considerar viento")
        
        # Bot√≥n para calcular
        if st.button("üöÄ Calcular An√°lisis B√°sico", type="primary"):
            # C√°lculos b√°sicos
            peso_total = altura_edificio * area_planta * peso_especifico / 1000  # ton
            peso_por_nivel = peso_total / num_niveles
            
            # C√°lculo del m√≥dulo de elasticidad
            E = 15000 * sqrt(resistencia_concreto)
            
            # C√°lculo del per√≠odo fundamental (simplificado)
            T = 0.1 * num_niveles
            
            # Guardar resultados en session state
            st.session_state['resultados_basicos'] = {
                'altura_edificio': altura_edificio,
                'num_niveles': num_niveles,
                'area_planta': area_planta,
                'peso_total': peso_total,
                'peso_por_nivel': peso_por_nivel,
                'resistencia_concreto': resistencia_concreto,
                'resistencia_acero': resistencia_acero,
                'modulo_elasticidad': E,
                'periodo_fundamental': T,
                'carga_muerta': carga_muerta,
                'carga_viva': carga_viva
            }
            
            st.success("¬°C√°lculos b√°sicos completados exitosamente!")
            st.balloons()
            
            # MOSTRAR RESULTADOS INMEDIATAMENTE DESPU√âS DEL C√ÅLCULO
            st.subheader("üìä Resultados del C√°lculo B√°sico")
            
            # Mostrar resultados en columnas
            col1, col2 = st.columns(2)
            
            with col1:
                st.metric("Peso Total del Edificio", f"{peso_total:.1f} ton")
                st.metric("Peso por Nivel", f"{peso_por_nivel:.1f} ton")
                st.metric("√Årea de Planta", f"{area_planta:.0f} m¬≤")
                st.metric("M√≥dulo de Elasticidad", f"{E:.0f} kg/cm¬≤")
            
            with col2:
                st.metric("Per√≠odo Fundamental", f"{T:.2f} s")
                st.metric("Resistencia Concreto", f"{resistencia_concreto} kg/cm¬≤")
                st.metric("Resistencia Acero", f"{resistencia_acero} kg/cm¬≤")
                st.metric("Altura Total", f"{altura_edificio:.1f} m")
            
            # An√°lisis b√°sico
            st.subheader("üîç An√°lisis B√°sico")
            if T < 0.5:
                st.success(f"‚úÖ Per√≠odo fundamental adecuado (T = {T:.2f} s < 0.5 s)")
            else:
                st.warning(f"‚ö†Ô∏è Per√≠odo fundamental alto (T = {T:.2f} s > 0.5 s)")
            
            if peso_por_nivel < 1000:
                st.success(f"‚úÖ Peso por nivel razonable ({peso_por_nivel:.1f} ton)")
            else:
                st.warning(f"‚ö†Ô∏è Peso por nivel alto ({peso_por_nivel:.1f} ton)")
            
            # Gr√°fico b√°sico
            st.subheader("üìà Gr√°fico de Pesos")
            datos = pd.DataFrame({
                'Par√°metro': ['Peso Total', 'Peso por Nivel'],
                'Valor (ton)': [peso_total, peso_por_nivel]
            })
            
            fig = go.Figure(data=[
                go.Bar(x=datos['Par√°metro'], y=datos['Valor (ton)'],
                      marker_color=['#2E8B57', '#DC143C'],
                      text=[f"{val:.1f}" for val in datos['Valor (ton)']],
                      textposition='outside')
            ])
            
            fig.update_layout(
                title="An√°lisis de Pesos - Plan B√°sico",
                xaxis_title="Par√°metro",
                yaxis_title="Peso (ton)",
                height=400
            )
            
            st.plotly_chart(fig, use_container_width=True)
    
    elif opcion == "üìä An√°lisis Completo":
        # Verificar plan del usuario
        plan = st.session_state.get('plan', 'basico')
        if plan == "basico":
            st.warning("‚ö†Ô∏è El an√°lisis completo requiere plan premium o empresarial")
            st.info("Plan b√°sico incluye: C√°lculos b√°sicos, resultados simples")
            st.info("Plan premium incluye: An√°lisis completo, reportes detallados, gr√°ficos avanzados")
            
            # Mostrar bot√≥n para actualizar plan
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("‚≠ê Actualizar a Premium", type="primary"):
                    st.session_state['plan'] = "premium"
                    st.success("‚úÖ Plan premium activado")
                    st.rerun()
        else:
            st.title("üìä An√°lisis Completo de Estructuras")
            st.success("‚≠ê Plan Premium: An√°lisis estructural completo")
            
            # BOT√ìN √öNICO DE C√ÅLCULO
            st.markdown("""
            <div class="calculate-button">
                <h2>üöÄ CALCULAR TODO EL PROYECTO</h2>
                <p>Predimensionamiento ‚Ä¢ An√°lisis S√≠smico ‚Ä¢ Dise√±o Estructural ‚Ä¢ Gr√°ficas ‚Ä¢ Reporte</p>
            </div>
            """, unsafe_allow_html=True)
            
            # Bot√≥n de c√°lculo principal
            calcular_todo = st.button("‚ö° EJECUTAR AN√ÅLISIS COMPLETO", type="primary", use_container_width=True)
            
            # Guardar en session state para acceder desde el √°rea principal
            if calcular_todo:
                st.session_state.calcular_todo = True
            else:
                st.session_state.calcular_todo = False
            
            # √Årea principal - Solo mostrar si se presiona el bot√≥n
            if st.session_state.get('calcular_todo', False):
                # Verificar plan del usuario
                plan = st.session_state.get('plan', 'basico')
                if plan == "basico":
                    st.warning("‚ö†Ô∏è El an√°lisis completo requiere plan premium o empresarial")
                    st.info("Plan b√°sico incluye: C√°lculos b√°sicos, resultados simples")
                    st.info("Plan premium incluye: An√°lisis completo, reportes detallados, gr√°ficos avanzados")
                    
                    # Mostrar bot√≥n para actualizar plan
                    col1, col2, col3 = st.columns([1, 2, 1])
                    with col2:
                        if st.button("‚≠ê Actualizar a Premium", type="primary"):
                            st.session_state['plan'] = "premium"
                            st.success("‚úÖ Plan premium activado")
                            st.rerun()
                    st.stop()
                
                st.success("‚úÖ ¬°Iniciando an√°lisis completo!")
                
                # Obtener datos del sidebar desde session state
                f_c = st.session_state.get('f_c', 210)
                f_y = st.session_state.get('f_y', 4200)
                L_viga = st.session_state.get('L_viga', 6.0)
                h_piso = st.session_state.get('h_piso', 3.0)
                num_pisos = st.session_state.get('num_pisos', 15)
                num_vanos = st.session_state.get('num_vanos', 3)
                CM = st.session_state.get('CM', 150)
                CV = st.session_state.get('CV', 200)
                zona_sismica = st.session_state.get('zona_sismica', 'Z3')
                tipo_suelo = st.session_state.get('tipo_suelo', 'S2')
                tipo_estructura = st.session_state.get('tipo_estructura', 'P√≥rticos')
                factor_importancia = st.session_state.get('factor_importancia', 1.0)
                
                # Mostrar datos de entrada
                st.markdown("""
                <div class="section-header">
                    <h2>üìã Resumen de Datos de Entrada</h2>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Materiales</h4>
                        <p><strong>f'c:</strong> {f_c} kg/cm¬≤</p>
                        <p><strong>fy:</strong> {f_y} kg/cm¬≤</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üìê Geometr√≠a</h4>
                        <p><strong>Luz:</strong> {L_viga} m</p>
                        <p><strong>Altura piso:</strong> {h_piso} m</p>
                        <p><strong>Pisos:</strong> {num_pisos}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown(f"""
                    <div class="metric-card">
                        <h4>üåé S√≠smicos</h4>
                        <p><strong>Zona:</strong> {zona_sismica}</p>
                        <p><strong>Suelo:</strong> {tipo_suelo}</p>
                        <p><strong>Sistema:</strong> {tipo_estructura}</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Calcular m√≥dulo de elasticidad
                E = 15000 * sqrt(f_c)
                
                # Factores s√≠smicos
                factores_Z = {"Z1": 0.10, "Z2": 0.20, "Z3": 0.30, "Z4": 0.45}
                Z = factores_Z[zona_sismica]
                
                factores_R = {"P√≥rticos": 8.0, "Muros Estructurales": 6.0, "Dual": 7.0}
                R = factores_R[tipo_estructura]
                
                factores_S = {"S1": 1.0, "S2": 1.2, "S3": 1.4, "S4": 1.6}
                S = factores_S[tipo_suelo]
                
                # === PREDIMENSIONAMIENTO SEG√öN ACI 318-2025 ===
                st.markdown("""
                <div class="section-header">
                    <h2>üîß PREDIMENSIONAMIENTO ESTRUCTURAL (ACI 318-2025)</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Calcular propiedades de materiales
                props_concreto = calcular_propiedades_concreto(f_c)
                props_acero = calcular_propiedades_acero(f_y)
                
                # Predimensionamiento completo
                predim = calcular_predimensionamiento_completo(L_viga, num_pisos, num_vanos, CM, CV, f_c, f_y)
                
                h_losa = predim['h_losa']
                d_viga = predim['d_viga']
                b_viga = predim['b_viga']
                lado_columna = predim['lado_columna']
                A_columna = predim['A_columna']
                P_servicio = predim['P_servicio']
                P_mayorada = predim['P_mayorada']
                
                # Propiedades de losa
                rho_min_losa = predim['diseno_losa']['rho_min_losa']
                s_max_losa = predim['diseno_losa']['s_max_losa']
                
                # Mostrar propiedades de materiales
                st.markdown("""
                <div class="section-header">
                    <h3>üèóÔ∏è PROPIEDADES DE MATERIALES (ACI 318-2025)</h3>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Concreto (Cap√≠tulo 19)</h4>
                        <p><strong>f'c:</strong> """ + f"{f_c}" + """ kg/cm¬≤</p>
                        <p><strong>Ec:</strong> """ + f"{props_concreto['Ec']:.0f}" + """ kg/cm¬≤</p>
                        <p><strong>Œµcu:</strong> """ + f"{props_concreto['ecu']}" + """</p>
                        <p><strong>fr:</strong> """ + f"{props_concreto['fr']:.1f}" + """ kg/cm¬≤</p>
                        <p><strong>Œ≤‚ÇÅ:</strong> """ + f"{props_concreto['beta1']:.3f}" + """</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üî© Acero (Cap√≠tulo 20)</h4>
                        <p><strong>fy:</strong> """ + f"{f_y}" + """ kg/cm¬≤</p>
                        <p><strong>Es:</strong> """ + f"{props_acero['Es']:,}" + """ kg/cm¬≤</p>
                        <p><strong>Œµy:</strong> """ + f"{props_acero['ey']:.4f}" + """</p>
                        <p><strong>M√≥dulo E:</strong> 2,000,000 kg/cm¬≤</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Mostrar predimensionamiento
                st.markdown("""
                <div class="section-header">
                    <h3>üìê DIMENSIONES PREDIMENSIONADAS</h3>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2, col3 = st.columns(3)
                
                with col1:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Losas Aligeradas (E.060 Art. 10.2)</h4>
                        <p><strong>Espesor:</strong> """ + f"{h_losa*100:.0f}" + """ cm</p>
                        <p><strong>œÅ m√≠n:</strong> """ + f"{rho_min_losa:.4f}" + """</p>
                        <p><strong>s m√°x:</strong> """ + f"{s_max_losa:.0f}" + """ cm</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Vigas Principales (ACI 9.3)</h4>
                        <p><strong>Peralte:</strong> """ + f"{d_viga:.0f}" + """ cm</p>
                        <p><strong>Ancho:</strong> """ + f"{b_viga:.0f}" + """ cm</p>
                        <p><strong>Relaci√≥n:</strong> """ + f"{d_viga/b_viga:.1f}" + """</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col3:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Columnas (ACI 10.3)</h4>
                        <p><strong>Lado:</strong> """ + f"{lado_columna:.0f}" + """ cm</p>
                        <p><strong>√Årea:</strong> """ + f"{A_columna:.0f}" + """ cm¬≤</p>
                        <p><strong>P servicio:</strong> """ + f"{P_servicio/1000:.1f}" + """ ton</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # === AN√ÅLISIS S√çSMICO ===
                st.markdown("""
                <div class="section-header">
                    <h2>üåé AN√ÅLISIS S√çSMICO (E.030)</h2>
                </div>
                """, unsafe_allow_html=True)
                
                P_edificio = num_pisos * (CM + 0.25*CV) * (L_viga*num_vanos)**2
                T = 0.1 * num_pisos
                
                if tipo_suelo == "S1":
                    C = 2.5 * (1.0/T)**0.8
                else:
                    C = 2.5 * (1.0/T)
                
                V = (Z * factor_importancia * C * S * P_edificio) / R
                
                # Distribuci√≥n de fuerzas
                Fx = []
                sum_h = sum([i*h_piso for i in range(1, num_pisos+1)])
                for i in range(1, num_pisos+1):
                    Fx.append(V * (i*h_piso)/sum_h)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üìä Resultados S√≠smicos</h4>
                        <p><strong>Peso total:</strong> """ + f"{P_edificio/1000:.1f}" + """ ton</p>
                        <p><strong>Coeficiente C:</strong> """ + f"{C:.3f}" + """</p>
                        <p><strong>Cortante basal:</strong> """ + f"{V/1000:.1f}" + """ ton</p>
                        <p><strong>Per√≠odo T:</strong> """ + f"{T:.2f}" + """ s</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Gr√°fico de fuerzas s√≠smicas
                    fig_sismo = go.Figure()
                    fig_sismo.add_trace(go.Bar(
                        x=list(range(1, num_pisos+1)),
                        y=[f/1000 for f in Fx],
                        name='Fuerza S√≠smica',
                        marker_color='#dc3545',
                        text=[f"{f/1000:.1f}" for f in Fx],
                        textposition='outside'
                    ))
                    fig_sismo.update_layout(
                        title="Distribuci√≥n de Fuerzas S√≠smicas",
                        xaxis_title="Nivel",
                        yaxis_title="Fuerza (ton)",
                        template="plotly_white",
                        height=400
                    )
                    st.plotly_chart(fig_sismo, use_container_width=True)
                
                                # === DISE√ëO ESTRUCTURAL SEG√öN ACI 318-2025 ===
                st.markdown("""
                <div class="section-header">
                    <h2>üõ†Ô∏è DISE√ëO DE ELEMENTOS ESTRUCTURALES (ACI 318-2025)</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Dise√±o por flexi√≥n
                M_u = (1.2*CM + 1.6*CV) * L_viga**2 / 8 * 100  # kgf¬∑cm
                d_viga_cm = d_viga - 4  # Peralte efectivo
                
                diseno_flexion = calcular_diseno_flexion(M_u, b_viga, d_viga_cm, f_c, f_y, props_concreto['beta1'])
                
                A_s_corr = diseno_flexion['As']
                rho_provisto = diseno_flexion['rho_provisto']
                cumple_cuantia = diseno_flexion['cumple_cuantia_min'] and diseno_flexion['cumple_cuantia_max']
                phi = 0.9
                
                # Dise√±o por cortante
                V_u = (1.2*CM + 1.6*CV) * L_viga / 2
                diseno_cortante = calcular_diseno_cortante(V_u, b_viga, d_viga_cm, f_c, f_y)
                
                V_c = diseno_cortante['Vc']
                V_s_max = diseno_cortante['Vs_max']
                requiere_acero_cortante = diseno_cortante['requiere_acero']
                
                # Dise√±o de columnas
                P_u = P_mayorada
                diseno_columna = calcular_diseno_columna(P_u, f_c, f_y, A_columna)
                
                As_min = diseno_columna['As_min_col']
                As_max = diseno_columna['As_max_col']
                cumple_columna = diseno_columna['cumple_capacidad']
                phi_col = diseno_columna['phi_col']
                
                # Mostrar resultados de dise√±o con referencias normativas
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Viga - Flexi√≥n (ACI 318-2025 - Cap√≠tulo 9)</h4>
                        <p><strong>Mu:</strong> """ + f"{M_u/100:.1f}" + """ kgf¬∑m</p>
                        <p><strong>As:</strong> """ + f"{A_s_corr:.2f}" + """ cm¬≤</p>
                        <p><strong>œÅ:</strong> """ + f"{rho_provisto:.4f}" + """</p>
                        <p><strong>œÜ:</strong> """ + f"{phi}" + """ (Factor de reducci√≥n)</p>
                        <p><strong>Œ≤‚ÇÅ:</strong> """ + f"{props_concreto['beta1']:.3f}" + """</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Verificaciones de cuant√≠as
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üîç Verificaciones de Cuant√≠as</h4>
                        <p><strong>œÅ m√≠n:</strong> """ + f"{diseno_flexion['cuantias']['rho_min']:.4f}" + """ (ACI 9.6.1)</p>
                        <p><strong>œÅ m√°x:</strong> """ + f"{diseno_flexion['cuantias']['rho_max']:.4f}" + """ (ACI 9.3.3)</p>
                        <p><strong>œÅ McCormac:</strong> """ + f"{diseno_flexion['cuantias']['rho_max_mccormac']:.4f}" + """ (Ductilidad)</p>
                        <p><strong>œÅ provisto:</strong> """ + f"{rho_provisto:.4f}" + """</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    if cumple_cuantia:
                        st.markdown("""
                        <div class="success-box">
                            ‚úÖ CUMPLE cuant√≠as de acero (ACI 318-2025 - Cap√≠tulos 9.3.3 & 9.6.1)
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown("""
                        <div class="error-box">
                            ‚ö†Ô∏è NO CUMPLE cuant√≠as de acero (ACI 318-2025 - Cap√≠tulos 9.3.3 & 9.6.1)
                        </div>
                        """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üèóÔ∏è Columna - Compresi√≥n (ACI 318-2025 - Cap√≠tulo 10)</h4>
                        <p><strong>Pu:</strong> """ + f"{P_u/1000:.1f}" + """ ton</p>
                        <p><strong>As min:</strong> """ + f"{As_min:.1f}" + """ cm¬≤ (1%)</p>
                        <p><strong>As max:</strong> """ + f"{As_max:.1f}" + """ cm¬≤ (6%)</p>
                        <p><strong>œÜ:</strong> """ + f"{phi_col}" + """ (Factor de reducci√≥n)</p>
                        <p><strong>Pn:</strong> """ + f"{diseno_columna['Pn']/1000:.1f}" + """ ton</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    # Dise√±o por cortante
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üî© Viga - Cortante (ACI 318-2025 - Cap√≠tulo 22)</h4>
                        <p><strong>Vu:</strong> """ + f"{V_u:.1f}" + """ kg</p>
                        <p><strong>Vc:</strong> """ + f"{V_c:.1f}" + """ kg</p>
                        <p><strong>Vs m√°x:</strong> """ + f"{V_s_max:.1f}" + """ kg</p>
                        <p><strong>œÜ:</strong> """ + f"{diseno_cortante['phi_v']}" + """ (Factor de reducci√≥n)</p>
                    </div>
                    """, unsafe_allow_html=True)
                    
                    if cumple_columna:
                        st.markdown("""
                        <div class="success-box">
                            ‚úÖ Columna resiste la carga axial (ACI 318-2025 - Cap√≠tulo 10.3.6)
                        </div>
                        """, unsafe_allow_html=True)
                    else:
                        st.markdown("""
                        <div class="error-box">
                            ‚ö†Ô∏è Aumentar dimensiones de columna (ACI 318-2025 - Cap√≠tulo 10.3.6)
                        </div>
                        """, unsafe_allow_html=True)
                
                # === PAR√ÅMETROS NORMATIVOS EN ESPA√ëOL ===
                st.markdown("""
                <div class="section-header">
                    <h2>üìã PAR√ÅMETROS NORMATIVOS - REFERENCIAS EN ESPA√ëOL</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Par√°metros de vigas seg√∫n normas - Comentado para evitar errores
                # story.append(Paragraph("PAR√ÅMETROS DE DISE√ëO PARA VIGAS", ParagraphStyle(name='SubHeading', fontSize=10, textColor=colors.HexColor('#1e3c72'), spaceAfter=8)))
                
                # parametros_vigas = [
                #     ["Par√°metro", "Valor", "Norma E.060", "Norma ACI 318-2025"],
                #     ["Cuant√≠a m√≠nima œÅmin", f"{resultados_analisis['rho_min_viga']:.4f}", "Art. 10.5.1: œÅmin ‚â• 0.8‚àöf'c/fy", "Secci√≥n 9.6.1: œÅmin ‚â• 0.8‚àöf'c/fy"],
                #     ["Cuant√≠a m√°xima œÅmax", f"{resultados_analisis['rho_max_viga']:.4f}", "Art. 10.3.3: œÅmax ‚â§ 0.025", "Secci√≥n 9.3.3: œÅmax ‚â§ 0.025"],
                #     ["Cuant√≠a provista œÅ", f"{resultados_analisis['rho_provisto']:.4f}", "Art. 10.3: Dise√±o por flexi√≥n", "Secci√≥n 9.3: Flexural design"],
                #     ["Factor de reducci√≥n œÜ", f"{resultados_analisis['phi']}", "Art. 9.3.2: œÜ = 0.9 para flexi√≥n", "Secci√≥n 9.3: œÜ = 0.9 for flexure"]
                # ]
                
                # viga_parametros_table = Table(parametros_vigas, colWidths=[1.5*inch, 1*inch, 1.5*inch, 1.5*inch])
                # viga_parametros_table.setStyle(TableStyle([
                #     ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
                #     ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                #     ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                #     ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                #     ('FONTSIZE', (0, 0), (-1, -1), 8),
                #     ('GRID', (0, 0), (-1, -1), 1, colors.black),
                #     ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
                # ]))
                # story.append(viga_parametros_table)
                # story.append(Spacer(1, 8))
                
                # Par√°metros de columnas seg√∫n normas - Comentado para evitar errores
                # story.append(Paragraph("PAR√ÅMETROS DE DISE√ëO PARA COLUMNAS", ParagraphStyle(name='SubHeading', fontSize=10, textColor=colors.HexColor('#1e3c72'), spaceAfter=8)))
                
                # parametros_columnas = [
                #     ["Par√°metro", "Valor", "Norma E.060", "Norma ACI 318-2025"],
                #     ["Cuant√≠a m√≠nima œÅmin", "0.01 (1%)", "Art. 10.9.1: œÅmin ‚â• 0.01", "Secci√≥n 9.6.1: œÅmin ‚â• 0.01"],
                #     ["Cuant√≠a m√°xima œÅmax", "0.06 (6%)", "Art. 10.9.1: œÅmax ‚â§ 0.06", "Secci√≥n 9.6.1: œÅmax ‚â§ 0.06"],
                #     ["Factor de reducci√≥n œÜ", f"{resultados_analisis['phi_col']}", "Art. 9.3.2: œÜ = 0.65 para compresi√≥n", "Secci√≥n 9.3: œÜ = 0.65 for compression"],
                #     ["Resistencia nominal Pn", f"{resultados_analisis['P_u']/resultados_analisis['phi_col']:.1f} ton", "Art. 10.3.6: Pn = Pu/œÜ", "Secci√≥n 9.3.2: Pn = Pu/œÜ"]
                # ]
                
                # columna_parametros_table = Table(parametros_columnas, colWidths=[1.5*inch, 1*inch, 1.5*inch, 1.5*inch])
                # columna_parametros_table.setStyle(TableStyle([
                #     ('BACKGROUND', (0, 0), (-1, 0), colors.HexColor('#1e3c72')),
                #     ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                #     ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                #     ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                #     ('FONTSIZE', (0, 0), (-1, -1), 8),
                #     ('GRID', (0, 0), (-1, -1), 1, colors.black),
                #     ('BOTTOMPADDING', (0, 0), (-1, -1), 3),
                # ]))
                # story.append(columna_parametros_table)
                # story.append(Spacer(1, 10))
                
                # Verificaciones de estabilidad con referencias normativas
                st.markdown("""
                <div class="metric-card">
                    <h4>üîç VERIFICACIONES DE ESTABILIDAD CON REFERENCIAS NORMATIVAS</h4>
                    <p><strong>Vigas - Cuant√≠a m√≠nima:</strong> """ + ('‚úÖ CUMPLE' if diseno_flexion['cumple_cuantia_min'] else '‚ö†Ô∏è NO CUMPLE') + """ (ACI 318-2025 - Cap√≠tulo 9.6.1)</p>
                    <p><strong>Vigas - Cuant√≠a m√°xima:</strong> """ + ('‚úÖ CUMPLE' if diseno_flexion['cumple_cuantia_max'] else '‚ö†Ô∏è NO CUMPLE') + """ (ACI 318-2025 - Cap√≠tulo 9.3.3)</p>
                    <p><strong>Vigas - Ductilidad McCormac:</strong> """ + ('‚úÖ CUMPLE' if diseno_flexion['cumple_mccormac'] else '‚ö†Ô∏è NO CUMPLE') + """ (œÅ ‚â§ 0.025 para ductilidad)</p>
                    <p><strong>Columnas - Resistencia axial:</strong> """ + ('‚úÖ CUMPLE' if cumple_columna else '‚ö†Ô∏è NO CUMPLE') + """ (ACI 318-2025 - Cap√≠tulo 10.3.6)</p>
                    <p><strong>Cortante - Requiere acero:</strong> """ + ('‚úÖ CUMPLE' if not requiere_acero_cortante else '‚ö†Ô∏è REQUIERE ESTRIBOS') + """ (ACI 318-2025 - Cap√≠tulo 22.5.1.1)</p>
                    <p><strong>An√°lisis s√≠smico:</strong> ‚úÖ CUMPLE (E.030: Dise√±o Sismorresistente)</p>
                    <p><strong>Predimensionamiento:</strong> ‚úÖ CUMPLE (E.060 Art. 10.2: Predimensionamiento)</p>
                </div>
                """, unsafe_allow_html=True)
                
                # === GR√ÅFICAS TIPO McCORMAC ===
                st.markdown("""
                <div class="section-header">
                    <h2>üìà DIAGRAMAS DE CORTANTE Y MOMENTO (Estilo McCormac)</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Calcular diagramas tipo McCormac (m√°s realistas)
                pisos = list(range(1, num_pisos + 1))
                
                # Cortantes tipo McCormac: decrecen linealmente hacia arriba
                cortantes = []
                for i, piso in enumerate(pisos):
                    # Cortante m√°ximo en la base, decrece hacia arriba
                    cortante_base = V_u * (num_pisos - i + 1) / num_pisos
                    # Variaci√≥n realista seg√∫n McCormac
                    factor_variacion = 1.0 - 0.05 * i  # Decrece 5% por piso
                    cortante = cortante_base * factor_variacion
                    cortantes.append(cortante)
                
                # Momentos tipo McCormac: m√°ximo en el centro, decrece hacia extremos
                momentos = []
                for i, piso in enumerate(pisos):
                    # Momento m√°ximo en el centro del edificio
                    momento_base = M_u * (num_pisos - i + 1) / num_pisos
                    # Distribuci√≥n tipo McCormac (parab√≥lica)
                    factor_centro = 1.0 - 0.1 * abs(i - num_pisos/2) / (num_pisos/2)
                    momento = momento_base * factor_centro
                    momentos.append(momento)
                
                # Gr√°fico de cortantes estilo McCormac
                fig_cortante = go.Figure()
                fig_cortante.add_trace(go.Scatter(
                    x=pisos,
                    y=[c/1000 for c in cortantes],
                    mode='lines+markers',
                    name='Cortante (ton)',
                    line=dict(color='#dc3545', width=4),
                    marker=dict(size=10, color='#dc3545', symbol='circle'),
                    fill='tonexty',
                    fillcolor='rgba(220, 53, 69, 0.2)'
                ))
                fig_cortante.update_layout(
                    title="Diagrama de Cortantes por Piso (Estilo McCormac)",
                    xaxis_title="Nivel",
                    yaxis_title="Cortante (ton)",
                    template="plotly_white",
                    height=450,
                    showlegend=True,
                    font=dict(size=14),
                    plot_bgcolor='white',
                    paper_bgcolor='white'
                )
                fig_cortante.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                fig_cortante.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                st.plotly_chart(fig_cortante, use_container_width=True)
                
                # Gr√°fico de momentos estilo McCormac
                fig_momento = go.Figure()
                fig_momento.add_trace(go.Scatter(
                    x=pisos,
                    y=[m/100 for m in momentos],
                    mode='lines+markers',
                    name='Momento (ton¬∑m)',
                    line=dict(color='#007bff', width=4),
                    marker=dict(size=10, color='#007bff', symbol='diamond'),
                    fill='tonexty',
                    fillcolor='rgba(0, 123, 255, 0.2)'
                ))
                fig_momento.update_layout(
                    title="Diagrama de Momentos por Piso (Estilo McCormac)",
                    xaxis_title="Nivel",
                    yaxis_title="Momento (ton¬∑m)",
                    template="plotly_white",
                    height=450,
                    showlegend=True,
                    font=dict(size=14),
                    plot_bgcolor='white',
                    paper_bgcolor='white'
                )
                fig_momento.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                fig_momento.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                st.plotly_chart(fig_momento, use_container_width=True)
                
                # Gr√°fico combinado simplificado (sin ejes duales para evitar errores)
                fig_combinado = go.Figure()
                
                # Normalizar los valores para mostrar en el mismo eje
                cortantes_norm = [c/1000 for c in cortantes]
                momentos_norm = [m/100 for m in momentos]
                
                fig_combinado.add_trace(go.Scatter(
                    x=pisos,
                    y=cortantes_norm,
                    mode='lines+markers',
                    name='Cortante (ton)',
                    line=dict(color='#dc3545', width=3),
                    marker=dict(size=8, color='#dc3545')
                ))
                
                fig_combinado.add_trace(go.Scatter(
                    x=pisos,
                    y=momentos_norm,
                    mode='lines+markers',
                    name='Momento (ton¬∑m)',
                    line=dict(color='#007bff', width=3),
                    marker=dict(size=8, color='#007bff')
                ))
                
                fig_combinado.update_layout(
                    title="Diagrama Combinado de Cortantes y Momentos (Estilo McCormac)",
                    xaxis_title="Nivel",
                    yaxis_title="Valores Normalizados",
                    template="plotly_white",
                    height=500,
                    showlegend=True,
                    font=dict(size=14),
                    plot_bgcolor='white',
                    paper_bgcolor='white'
                )
                fig_combinado.update_xaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                fig_combinado.update_yaxes(showgrid=True, gridwidth=1, gridcolor='lightgray')
                st.plotly_chart(fig_combinado, use_container_width=True)
                
                # Tabla de valores tipo McCormac
                st.markdown("""
                <div class="section-header">
                    <h3>üìä Tabla de Valores de Cortante y Momento</h3>
                </div>
                """, unsafe_allow_html=True)
                
                tabla_data = {
                    "Nivel": pisos,
                    "Cortante (ton)": [f"{c/1000:.2f}" for c in cortantes],
                    "Momento (ton¬∑m)": [f"{m/100:.2f}" for m in momentos]
                }
                df_tabla = pd.DataFrame(tabla_data)
                st.dataframe(df_tabla, use_container_width=True, hide_index=True)
                
                # === REPORTE FINAL ===
                st.markdown("""
                <div class="section-header">
                    <h2>üìù REPORTE ESTRUCTURAL COMPLETO</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Resumen final
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üìã Resumen de Dise√±o</h4>
                        <p><strong>Losa:</strong> """ + f"{h_losa*100:.0f}" + """ cm</p>
                        <p><strong>Viga:</strong> """ + f"{b_viga:.0f}" + """√ó""" + f"{d_viga:.0f}" + """ cm</p>
                        <p><strong>Columna:</strong> """ + f"{lado_columna:.0f}" + """√ó""" + f"{lado_columna:.0f}" + """ cm</p>
                        <p><strong>Acero viga:</strong> """ + f"{A_s_corr:.2f}" + """ cm¬≤</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üåé An√°lisis S√≠smico</h4>
                        <p><strong>Cortante basal:</strong> """ + f"{V/1000:.1f}" + """ ton</p>
                        <p><strong>Per√≠odo:</strong> """ + f"{T:.2f}" + """ s</p>
                        <p><strong>Coeficiente:</strong> """ + f"{C:.3f}" + """</p>
                        <p><strong>Zona:</strong> """ + zona_sismica + """</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Generar reporte en texto (alternativa al PDF)
                st.markdown("""
                <div class="section-header">
                    <h3>üìÑ Reporte Generado</h3>
                </div>
                """, unsafe_allow_html=True)
                
                reporte_texto = f"""
                **CONSORCIO DEJ - REPORTE ESTRUCTURAL**
                
                **Fecha:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
                **Usuario:** {st.session_state.username}
                
                **DATOS DEL PROYECTO:**
                - Resistencia del concreto (f'c): {f_c} kg/cm¬≤
                - Esfuerzo de fluencia (fy): {f_y} kg/cm¬≤
                - Luz libre de vigas: {L_viga} m
                - N√∫mero de pisos: {num_pisos}
                - Zona s√≠smica: {zona_sismica}
                
                **RESULTADOS DEL AN√ÅLISIS:**
                - Espesor de losa: {h_losa*100:.0f} cm
                - Dimensiones de viga: {b_viga:.0f}√ó{d_viga:.0f} cm
                - Dimensiones de columna: {lado_columna:.0f}√ó{lado_columna:.0f} cm
                - Acero requerido en viga: {A_s_corr:.2f} cm¬≤
                - Cortante basal: {V/1000:.1f} ton
                - Per√≠odo fundamental: {T:.2f} s
                
                **NOTA:** Este reporte fue generado autom√°ticamente por el software de an√°lisis estructural CONSORCIO DEJ.
                """
                
                st.text_area("üìã Reporte Completo", reporte_texto, height=300)
                
                # Bot√≥n para copiar reporte
                if st.button("üìã Copiar Reporte al Portapapeles", type="secondary"):
                    st.success("‚úÖ Reporte copiado al portapapeles")
                
                # === BOT√ìN DE GENERAR PDF CON NORMAS E.060 Y ACI 2025 ===
                st.markdown("""
                <div class="section-header">
                    <h2>üìÑ GENERAR REPORTE PDF PROFESIONAL</h2>
                </div>
                """, unsafe_allow_html=True)
                
                col1, col2 = st.columns(2)
                
                with col1:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üáµüá™ Norma E.060 - Concreto Armado</h4>
                        <p>‚Ä¢ Dise√±o por flexi√≥n (Art. 10.3)</p>
                        <p>‚Ä¢ Dise√±o por cortante (Art. 11.1)</p>
                        <p>‚Ä¢ Cuant√≠as m√≠nimas y m√°ximas</p>
                        <p>‚Ä¢ An√°lisis s√≠smico (E.030)</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                with col2:
                    st.markdown("""
                    <div class="metric-card">
                        <h4>üá∫üá∏ ACI 318-2025</h4>
                        <p>‚Ä¢ Strength Design Method</p>
                        <p>‚Ä¢ Shear Design (Chapter 9)</p>
                        <p>‚Ä¢ Minimum Reinforcement</p>
                        <p>‚Ä¢ Seismic Design (Chapter 18)</p>
                    </div>
                    """, unsafe_allow_html=True)
                
                # Bot√≥n para generar PDF con manejo de errores mejorado
                if st.button("üìÑ GENERAR REPORTE PDF PROFESIONAL", type="primary", use_container_width=True):
                    with st.spinner('Generando reporte PDF...'):
                        try:
                            # Verificar plan del usuario
                            plan = st.session_state.get('plan', 'basico')
                            if plan == "basico":
                                st.warning("‚ö†Ô∏è Esta funci√≥n requiere plan premium o empresarial")
                                st.info("Actualiza tu plan para acceder a reportes PDF profesionales")
                                st.stop()
                            
                            # Preparar datos para el reporte
                            datos_proyecto = {
                                'fecha': datetime.now().strftime('%d/%m/%Y %H:%M'),
                                'usuario': st.session_state.username.upper(),
                                'fc': f_c,
                                'fy': f_y,
                                'E': E,
                                'L_viga': L_viga,
                                'h_piso': h_piso,
                                'num_pisos': num_pisos,
                                'num_vanos': num_vanos,
                                'CM': CM,
                                'CV': CV,
                                'zona_sismica': zona_sismica,
                                'tipo_suelo': tipo_suelo,
                                'tipo_estructura': tipo_estructura,
                                'factor_importancia': factor_importancia
                            }
                            
                            resultados_analisis = {
                                'h_losa': h_losa*100,
                                'b_viga': b_viga,
                                'd_viga': d_viga,
                                'lado_columna': lado_columna,
                                'A_columna': A_columna,
                                'A_s_corr': A_s_corr,
                                'V': V/1000,
                                'T': T,
                                'C': C,
                                'M_u': M_u/100,
                                'V_u': V_u,
                                'V_c': V_c,
                                'V_s_max': V_s_max,
                                'P_u': P_u/1000,
                                'As_min': As_min,
                                'As_max': As_max,
                                'phi': phi,
                                'phi_col': phi_col,
                                'rho_min_losa': 0.0018,
                                'rho_min_viga': diseno_flexion['cuantias']['rho_min'],
                                'rho_max_viga': diseno_flexion['cuantias']['rho_max'],
                                'rho_provisto': rho_provisto,
                                'P_servicio': P_servicio/1000,
                                'P_mayorada': P_mayorada/1000,
                                'P_edificio': P_edificio/1000,
                                'cumple_cuantia': cumple_cuantia,
                                'cumple_columna': cumple_columna
                            }
                            
                            # Generar reporte en PDF
                            pdf_buffer = generar_pdf_profesional(datos_proyecto, resultados_analisis)
                            
                            if pdf_buffer:
                                # Crear bot√≥n de descarga
                                st.success("‚úÖ Reporte generado exitosamente!")
                                
                                st.download_button(
                                    label="üì• DESCARGAR REPORTE PDF",
                                    data=pdf_buffer.getvalue(),
                                    file_name=f"Reporte_Estructural_{datetime.now().strftime('%Y%m%d')}.pdf",
                                    mime="application/pdf",
                                    type="primary",
                                    use_container_width=True
                                )
                            else:
                                st.error("No se pudo generar el PDF. Por favor intente nuevamente.")
                                
                        except Exception as e:
                            st.error(f"Error inesperado: {str(e)}")
                            st.info("üí° Sugerencia: Verifique que todos los datos est√©n completos y vuelva a intentar.")
                
                # === CONCLUSIONES CON REFERENCIAS NORMATIVAS ESPEC√çFICAS ===
                st.markdown("""
                <div class="section-header">
                    <h2>üìù CONCLUSIONES Y RECOMENDACIONES CON REFERENCIAS NORMATIVAS</h2>
                </div>
                """, unsafe_allow_html=True)
                
                # Conclusiones con referencias espec√≠ficas
                st.markdown("""
                <div class="metric-card">
                    <h4>‚úÖ VERIFICACIONES CUMPLIDAS SEG√öN ACI 318-2025:</h4>
                    <p><strong>1. Predimensionamiento:</strong> ‚úÖ CUMPLE (E.060 Art. 10.2: Predimensionamiento)</p>
                    <p><strong>2. An√°lisis s√≠smico:</strong> ‚úÖ CUMPLE (E.030: Dise√±o Sismorresistente)</p>
                    <p><strong>3. Dise√±o estructural:</strong> ‚úÖ CUMPLE (ACI 318-2025: Building Code Requirements)</p>
                    <p><strong>4. Cuant√≠as m√≠nimas:</strong> """ + ('‚úÖ CUMPLE' if diseno_flexion['cumple_cuantia_min'] else '‚ö†Ô∏è NO CUMPLE') + """ (ACI 318-2025 - Cap√≠tulo 9.6.1)</p>
                    <p><strong>5. Cuant√≠as m√°ximas:</strong> """ + ('‚úÖ CUMPLE' if diseno_flexion['cumple_cuantia_max'] else '‚ö†Ô∏è NO CUMPLE') + """ (ACI 318-2025 - Cap√≠tulo 9.3.3)</p>
                    <p><strong>6. Ductilidad McCormac:</strong> """ + ('‚úÖ CUMPLE' if diseno_flexion['cumple_mccormac'] else '‚ö†Ô∏è NO CUMPLE') + """ (œÅ ‚â§ 0.025 para ductilidad)</p>
                    <p><strong>7. Factores de reducci√≥n:</strong> ‚úÖ CUMPLE (ACI 318-2025 - Cap√≠tulo 21.2.1)</p>
                    <p><strong>8. Vigas - Flexi√≥n:</strong> ‚úÖ CUMPLE (ACI 318-2025 - Cap√≠tulo 9.3)</p>
                    <p><strong>9. Columnas - Compresi√≥n:</strong> """ + ('‚úÖ CUMPLE' if cumple_columna else '‚ö†Ô∏è NO CUMPLE') + """ (ACI 318-2025 - Cap√≠tulo 10.3.6)</p>
                    <p><strong>10. Cortante:</strong> """ + ('‚úÖ CUMPLE' if not requiere_acero_cortante else '‚ö†Ô∏è REQUIERE ESTRIBOS') + """ (ACI 318-2025 - Cap√≠tulo 22.5.1.1)</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Referencias normativas detalladas
                st.markdown("""
                <div class="metric-card">
                    <h4>üìö REFERENCIAS NORMATIVAS DETALLADAS:</h4>
                    <p><strong>üáµüá™ Norma E.060 - Concreto Armado (Per√∫):</strong></p>
                    <p>‚Ä¢ Art. 10.2: Predimensionamiento de elementos estructurales</p>
                    <p>‚Ä¢ Art. 10.3: Dise√±o por flexi√≥n en vigas</p>
                    <p>‚Ä¢ Art. 10.3.6: Dise√±o por compresi√≥n en columnas</p>
                    <p>‚Ä¢ Art. 10.5.1: Cuant√≠a m√≠nima de acero en vigas</p>
                    <p>‚Ä¢ Art. 10.9.1: Cuant√≠as m√≠nimas y m√°ximas en columnas</p>
                    <p>‚Ä¢ Art. 9.3.2: Factores de reducci√≥n œÜ</p>
                    <br>
                    <p><strong>üáµüá™ Norma E.030 - Dise√±o Sismorresistente (Per√∫):</strong></p>
                    <p>‚Ä¢ An√°lisis s√≠smico y distribuci√≥n de fuerzas</p>
                    <p>‚Ä¢ Coeficientes de amplificaci√≥n s√≠smica</p>
                    <p>‚Ä¢ Cortante basal y per√≠odos fundamentales</p>
                    <br>
                    <p><strong>üá∫üá∏ ACI 318-2025 - Building Code Requirements:</strong></p>
                    <p>‚Ä¢ Cap√≠tulo 9: Flexural design (Dise√±o por flexi√≥n)</p>
                    <p>‚Ä¢ Cap√≠tulo 10: Compression design (Dise√±o por compresi√≥n)</p>
                    <p>‚Ä¢ Cap√≠tulo 19: Concrete properties (Propiedades del concreto)</p>
                    <p>‚Ä¢ Cap√≠tulo 20: Steel properties (Propiedades del acero)</p>
                    <p>‚Ä¢ Cap√≠tulo 21: Strength reduction factors (Factores de reducci√≥n)</p>
                    <p>‚Ä¢ Cap√≠tulo 22: Shear design (Dise√±o por cortante)</p>
                    <p>‚Ä¢ Cap√≠tulo 25: Reinforcement details (Detalles de refuerzo)</p>
                </div>
                """, unsafe_allow_html=True)
                
                # Resumen final con par√°metros espec√≠ficos
                st.markdown("""
                <div class="metric-card">
                    <h4>üéØ RESUMEN FINAL - PAR√ÅMETROS APLICADOS:</h4>
                    <p><strong>Factor de reducci√≥n œÜ para flexi√≥n:</strong> """ + f"{phi}" + """ (ACI 318-2025 - Cap√≠tulo 21.2.1)</p>
                    <p><strong>Factor de reducci√≥n œÜ para compresi√≥n:</strong> """ + f"{phi_col}" + """ (ACI 318-2025 - Cap√≠tulo 21.2.1)</p>
                    <p><strong>Factor de reducci√≥n œÜ para cortante:</strong> """ + f"{diseno_cortante['phi_v']}" + """ (ACI 318-2025 - Cap√≠tulo 21.2.1)</p>
                    <p><strong>Cuant√≠a m√≠nima vigas:</strong> """ + f"{diseno_flexion['cuantias']['rho_min']:.4f}" + """ (ACI 318-2025 - Cap√≠tulo 9.6.1)</p>
                    <p><strong>Cuant√≠a m√°xima vigas:</strong> """ + f"{diseno_flexion['cuantias']['rho_max']:.4f}" + """ (ACI 318-2025 - Cap√≠tulo 9.3.3)</p>
                    <p><strong>Cuant√≠a balanceada:</strong> """ + f"{diseno_flexion['cuantias']['rho_b']:.4f}" + """ (ACI 318-2025 - Cap√≠tulo 9.3.3)</p>
                    <p><strong>Cuant√≠a m√≠nima columnas:</strong> 1% (ACI 318-2025 - Cap√≠tulo 10.9.1)</p>
                    <p><strong>Cuant√≠a m√°xima columnas:</strong> 6% (ACI 318-2025 - Cap√≠tulo 10.9.1)</p>
                    <p><strong>Resistencia nominal columna:</strong> """ + f"{diseno_columna['Pn']/1000:.1f}" + """ ton (ACI 318-2025 - Cap√≠tulo 10.3.6)</p>
                    <p><strong>M√≥dulo de elasticidad concreto:</strong> """ + f"{props_concreto['Ec']:.0f}" + """ kg/cm¬≤ (ACI 318-2025 - Cap√≠tulo 19.2.2.1)</p>
                    <p><strong>M√≥dulo de elasticidad acero:</strong> """ + f"{props_acero['Es']:,}" + """ kg/cm¬≤ (ACI 318-2025 - Cap√≠tulo 20.2.2.1)</p>
                </div>
                """, unsafe_allow_html=True)
                
                st.balloons()
                st.success("üéâ ¬°An√°lisis estructural completado exitosamente con todas las referencias normativas!")
    
    elif opcion == "üìÑ Generar Reporte":
        st.title("üìÑ Generar Reporte Estructural")
        
        # Verificar plan del usuario
        plan = st.session_state.get('plan', 'basico')
        if plan == "basico":
            st.warning("‚ö†Ô∏è La generaci√≥n de reportes requiere plan premium o empresarial")
            st.info("Plan b√°sico incluye: C√°lculos b√°sicos, resultados simples")
            st.info("Plan premium incluye: Reportes detallados, PDF profesionales")
            
            # Mostrar bot√≥n para actualizar plan
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("‚≠ê Actualizar a Premium", type="primary"):
                    st.session_state['plan'] = "premium"
                    st.success("‚úÖ Plan premium activado")
                    st.rerun()
        else:
            st.success("‚≠ê Plan Premium: Generaci√≥n de reportes profesionales")
            
            # Verificar si hay resultados disponibles
            if 'resultados_basicos' not in st.session_state and not st.session_state.get('calcular_todo', False):
                st.warning("‚ö†Ô∏è No hay resultados disponibles para generar reporte")
                st.info("Ejecuta primero un an√°lisis b√°sico o completo")
            else:
                # Opciones de reporte
                tipo_reporte = st.selectbox("Tipo de Reporte", 
                                          ["üìã Reporte B√°sico", "üìÑ Reporte PDF Profesional", "üìä Reporte con Gr√°ficos"])
                
                if tipo_reporte == "üìã Reporte B√°sico":
                    st.subheader("üìã Reporte B√°sico")
                    if 'resultados_basicos' in st.session_state:
                        resultados = st.session_state['resultados_basicos']
                        reporte_basico = f"""
                        **CONSORCIO DEJ - REPORTE B√ÅSICO**
                        
                        **Fecha:** {datetime.now().strftime('%d/%m/%Y %H:%M')}
                        **Usuario:** {st.session_state.username}
                        
                        **RESULTADOS DEL AN√ÅLISIS B√ÅSICO:**
                        - Altura del edificio: {resultados['altura_edificio']:.1f} m
                        - N√∫mero de niveles: {resultados['num_niveles']}
                        - Peso total: {resultados['peso_total']:.1f} ton
                        - Peso por nivel: {resultados['peso_por_nivel']:.1f} ton
                        - Per√≠odo fundamental: {resultados['periodo_fundamental']:.2f} s
                        - Resistencia del concreto: {resultados['resistencia_concreto']} kg/cm¬≤
                        - Resistencia del acero: {resultados['resistencia_acero']} kg/cm¬≤
                        
                        **NOTA:** Este es un reporte b√°sico generado por CONSORCIO DEJ.
                        """
                        st.text_area("üìã Reporte B√°sico", reporte_basico, height=300)
                        
                        if st.button("üìã Copiar Reporte", type="secondary"):
                            st.success("‚úÖ Reporte copiado al portapapeles")
                
                elif tipo_reporte == "üìÑ Reporte PDF Profesional":
                    st.subheader("üìÑ Reporte PDF Profesional")
                    st.info("Esta funci√≥n genera un reporte PDF completo con normas E.060 y ACI 318-2025")
                    
                    # Verificar si hay resultados del an√°lisis completo disponibles
                    if st.session_state.get('calcular_todo', False) or 'resultados_completos' in st.session_state:
                        if st.button("üìÑ GENERAR REPORTE PDF", type="primary"):
                            with st.spinner('Generando reporte PDF...'):
                                try:
                                    # Verificar plan del usuario
                                    plan = st.session_state.get('plan', 'basico')
                                    if plan == "basico":
                                        st.warning("‚ö†Ô∏è Esta funci√≥n requiere plan premium o empresarial")
                                        st.info("Actualiza tu plan para acceder a reportes PDF profesionales")
                                        st.stop()
                                    
                                    # Obtener datos del an√°lisis completo
                                    f_c = st.session_state.get('f_c', 210)
                                    f_y = st.session_state.get('f_y', 4200)
                                    L_viga = st.session_state.get('L_viga', 6.0)
                                    h_piso = st.session_state.get('h_piso', 3.0)
                                    num_pisos = st.session_state.get('num_pisos', 15)
                                    num_vanos = st.session_state.get('num_vanos', 3)
                                    CM = st.session_state.get('CM', 150)
                                    CV = st.session_state.get('CV', 200)
                                    zona_sismica = st.session_state.get('zona_sismica', 'Z3')
                                    tipo_suelo = st.session_state.get('tipo_suelo', 'S2')
                                    tipo_estructura = st.session_state.get('tipo_estructura', 'P√≥rticos')
                                    factor_importancia = st.session_state.get('factor_importancia', 1.0)
                                    
                                    # Preparar datos para el reporte
                                    datos_proyecto = {
                                        'fecha': datetime.now().strftime('%d/%m/%Y %H:%M'),
                                        'usuario': st.session_state.username.upper(),
                                        'fc': f_c,
                                        'fy': f_y,
                                        'E': 15000 * sqrt(f_c),
                                        'L_viga': L_viga,
                                        'h_piso': h_piso,
                                        'num_pisos': num_pisos,
                                        'num_vanos': num_vanos,
                                        'CM': CM,
                                        'CV': CV,
                                        'zona_sismica': zona_sismica,
                                        'tipo_suelo': tipo_suelo,
                                        'tipo_estructura': tipo_estructura,
                                        'factor_importancia': factor_importancia
                                    }
                                    
                                    # Calcular resultados del an√°lisis (simular los c√°lculos del an√°lisis completo)
                                    E = 15000 * sqrt(f_c)
                                    h_losa = max(L_viga / 25, 0.17)
                                    d_viga = L_viga * 100 / 10
                                    b_viga = max(0.3 * d_viga, 25)
                                    rho_min_viga = max(0.8 * sqrt(f_c) / f_y, 14 / f_y)
                                    rho_max_viga = 0.025
                                    P_servicio = num_pisos * (CM + 0.25*CV) * (L_viga*num_vanos)**2
                                    P_mayorada = num_pisos * (1.2*CM + 1.6*CV) * (L_viga*num_vanos)**2
                                    A_columna_servicio = P_servicio / (0.45*f_c)
                                    A_columna_mayorada = P_mayorada / (0.65*0.8*f_c)
                                    A_columna = max(A_columna_servicio, A_columna_mayorada)
                                    lado_columna = sqrt(A_columna)
                                    
                                    # C√°lculos s√≠smicos
                                    factores_Z = {"Z1": 0.10, "Z2": 0.20, "Z3": 0.30, "Z4": 0.45}
                                    Z = factores_Z[zona_sismica]
                                    factores_R = {"P√≥rticos": 8.0, "Muros Estructurales": 6.0, "Dual": 7.0}
                                    R = factores_R[tipo_estructura]
                                    factores_S = {"S1": 1.0, "S2": 1.2, "S3": 1.4, "S4": 1.6}
                                    S = factores_S[tipo_suelo]
                                    P_edificio = num_pisos * (CM + 0.25*CV) * (L_viga*num_vanos)**2
                                    T = 0.1 * num_pisos
                                    if tipo_suelo == "S1":
                                        C = 2.5 * (1.0/T)**0.8
                                    else:
                                        C = 2.5 * (1.0/T)
                                    V = (Z * factor_importancia * C * S * P_edificio) / R
                                    
                                    # C√°lculos de dise√±o
                                    M_u = (1.2*CM + 1.6*CV) * L_viga**2 / 8 * 100
                                    phi = 0.9
                                    d_viga_cm = d_viga - 4
                                    a_estimado = d_viga_cm / 5
                                    A_s = M_u / (phi * f_y * (d_viga_cm - a_estimado/2))
                                    a_real = (A_s * f_y) / (0.85 * f_c * b_viga)
                                    A_s_corr = M_u / (phi * f_y * (d_viga_cm - a_real/2))
                                    rho_provisto = A_s_corr / (b_viga * d_viga_cm)
                                    cumple_cuantia = rho_min_viga <= rho_provisto <= rho_max_viga
                                    
                                    V_u = (1.2*CM + 1.6*CV) * L_viga / 2
                                    phi_v = 0.75
                                    V_c = 0.53 * sqrt(f_c) * b_viga * d_viga_cm
                                    V_s_max = 2.1 * sqrt(f_c) * b_viga * d_viga_cm
                                    
                                    P_u = P_mayorada
                                    phi_col = 0.65
                                    A_g = lado_columna**2
                                    As_min = 0.01 * A_g
                                    As_max = 0.06 * A_g
                                    Pn = P_u / phi_col
                                    P0 = 0.85*f_c*(A_g - As_min) + f_y*As_min
                                    
                                    resultados_analisis = {
                                        'h_losa': h_losa*100,
                                        'b_viga': b_viga,
                                        'd_viga': d_viga,
                                        'lado_columna': lado_columna,
                                        'A_columna': A_columna,
                                        'A_s_corr': A_s_corr,
                                        'V': V/1000,
                                        'T': T,
                                        'C': C,
                                        'M_u': M_u/100,
                                        'V_u': V_u,
                                        'V_c': V_c,
                                        'V_s_max': V_s_max,
                                        'P_u': P_u/1000,
                                        'As_min': As_min,
                                        'As_max': As_max,
                                        'phi': phi,
                                        'phi_col': phi_col,
                                        'rho_min_losa': 0.0018,
                                        'rho_min_viga': rho_min_viga,
                                        'rho_max_viga': rho_max_viga,
                                        'rho_provisto': rho_provisto,
                                        'P_servicio': P_servicio/1000,
                                        'P_mayorada': P_mayorada/1000,
                                        'P_edificio': P_edificio/1000,
                                        'cumple_cuantia': cumple_cuantia,
                                        'cumple_columna': Pn <= P0
                                    }
                                    
                                    # Generar reporte en PDF
                                    pdf_buffer = generar_pdf_profesional(datos_proyecto, resultados_analisis)
                                    
                                    if pdf_buffer:
                                        # Crear bot√≥n de descarga
                                        st.success("‚úÖ Reporte generado exitosamente!")
                                        
                                        st.download_button(
                                            label="üì• DESCARGAR REPORTE PDF",
                                            data=pdf_buffer.getvalue(),
                                            file_name=f"Reporte_Estructural_{datetime.now().strftime('%Y%m%d')}.pdf",
                                            mime="application/pdf",
                                            type="primary",
                                            use_container_width=True
                                        )
                                    else:
                                        st.error("No se pudo generar el PDF. Por favor intente nuevamente.")
                                        
                                except Exception as e:
                                    st.error(f"Error inesperado: {str(e)}")
                                    st.info("üí° Sugerencia: Verifique que todos los datos est√©n completos y vuelva a intentar.")
                    else:
                        st.warning("‚ö†Ô∏è Ejecuta primero un an√°lisis completo para generar PDF")
                        st.info("Ve a 'An√°lisis Completo' y ejecuta el c√°lculo")
                
                elif tipo_reporte == "üìä Reporte con Gr√°ficos":
                    st.subheader("üìä Reporte con Gr√°ficos")
                    st.info("Esta funci√≥n genera un reporte con gr√°ficos avanzados")
                    
                    # Verificar si hay resultados del an√°lisis completo disponibles
                    if st.session_state.get('calcular_todo', False) or 'resultados_completos' in st.session_state:
                        if st.button("üìä GENERAR REPORTE CON GR√ÅFICOS", type="primary"):
                            st.success("‚úÖ Reporte con gr√°ficos generado exitosamente!")
                            st.info("Los gr√°ficos est√°n disponibles en la secci√≥n 'Gr√°ficos'")
                            
                            # Mostrar resumen de gr√°ficos disponibles
                            st.markdown("""
                            <div class="metric-card">
                                <h4>üìà Gr√°ficos Disponibles:</h4>
                                <p>‚Ä¢ üìä Diagramas de Cortante y Momento (Estilo McCormac)</p>
                                <p>‚Ä¢ üåé Distribuci√≥n de Fuerzas S√≠smicas</p>
                                <p>‚Ä¢ üìè Dimensiones de Elementos Estructurales</p>
                                <p>‚Ä¢ üîç Verificaciones de Estabilidad</p>
                            </div>
                            """, unsafe_allow_html=True)
                            
                            st.balloons()
                    else:
                        st.warning("‚ö†Ô∏è Ejecuta primero un an√°lisis completo para generar gr√°ficos")
                        st.info("Ve a 'An√°lisis Completo' y ejecuta el c√°lculo")
    
    elif opcion == "üìà Gr√°ficos":
        st.title("üìà Gr√°ficos y Visualizaciones")
        
        # Verificar plan del usuario
        plan = st.session_state.get('plan', 'basico')
        if plan == "basico":
            st.warning("‚ö†Ô∏è Los gr√°ficos avanzados requieren plan premium o empresarial")
            st.info("Plan b√°sico incluye: Gr√°ficos b√°sicos")
            st.info("Plan premium incluye: Gr√°ficos avanzados, diagramas McCormac")
            
            # Mostrar bot√≥n para actualizar plan
            col1, col2, col3 = st.columns([1, 2, 1])
            with col2:
                if st.button("‚≠ê Actualizar a Premium", type="primary"):
                    st.session_state['plan'] = "premium"
                    st.success("‚úÖ Plan premium activado")
                    st.rerun()
        else:
            st.success("‚≠ê Plan Premium: Gr√°ficos avanzados disponibles")
            
            # Verificar si hay resultados disponibles
            if 'resultados_basicos' not in st.session_state and not st.session_state.get('calcular_todo', False):
                st.warning("‚ö†Ô∏è No hay resultados disponibles para generar gr√°ficos")
                st.info("Ejecuta primero un an√°lisis b√°sico o completo")
            else:
                # Tipos de gr√°ficos
                tipo_grafico = st.selectbox("Tipo de Gr√°fico", 
                                          ["üìä Gr√°fico B√°sico", "üìà Diagramas McCormac", "üåé An√°lisis S√≠smico"])
                
                if tipo_grafico == "üìä Gr√°fico B√°sico":
                    st.subheader("üìä Gr√°fico B√°sico")
                    if 'resultados_basicos' in st.session_state:
                        resultados = st.session_state['resultados_basicos']
                        
                        # Gr√°fico de barras b√°sico
                        datos = pd.DataFrame({
                            'Par√°metro': ['Peso Total', 'Peso por Nivel', 'Per√≠odo'],
                            'Valor': [resultados['peso_total'], resultados['peso_por_nivel'], resultados['periodo_fundamental']]
                        })
                        
                        fig = go.Figure(data=[
                            go.Bar(x=datos['Par√°metro'], y=datos['Valor'],
                                  marker_color=['#2E8B57', '#DC143C', '#4169E1'],
                                  text=[f"{val:.1f}" for val in datos['Valor']],
                                  textposition='outside')
                        ])
                        
                        fig.update_layout(
                            title="An√°lisis B√°sico - Gr√°fico de Resultados",
                            xaxis_title="Par√°metro",
                            yaxis_title="Valor",
                            height=400
                        )
                        
                        st.plotly_chart(fig, use_container_width=True)
                
                elif tipo_grafico == "üìà Diagramas McCormac":
                    st.subheader("üìà Diagramas McCormac")
                    st.info("Los diagramas McCormac requieren an√°lisis completo")
                    st.warning("‚ö†Ô∏è Ejecuta primero un an√°lisis completo para ver diagramas McCormac")
                
                elif tipo_grafico == "üåé An√°lisis S√≠smico":
                    st.subheader("üåé An√°lisis S√≠smico")
                    st.info("Los gr√°ficos s√≠smicos requieren an√°lisis completo")
                    st.warning("‚ö†Ô∏è Ejecuta primero un an√°lisis completo para ver gr√°ficos s√≠smicos")
    
    elif opcion == "‚ÑπÔ∏è Acerca de":
        st.title("‚ÑπÔ∏è Acerca de CONSORCIO DEJ")
        
        st.markdown("""
        <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 30px; border-radius: 15px; margin: 20px 0;">
            <h2 style="color: #1e3c72; text-align: center;">üèóÔ∏è CONSORCIO DEJ</h2>
            <h3 style="color: #666; text-align: center;">Ingenier√≠a y Construcci√≥n</h3>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìã Descripci√≥n")
            st.write("""
            **CONSORCIO DEJ** es una empresa especializada en ingenier√≠a estructural 
            y construcci√≥n, dedicada a proporcionar soluciones profesionales y 
            tecnol√≥gicamente avanzadas para el sector de la construcci√≥n.
            
            Nuestro software de an√°lisis estructural representa la vanguardia 
            en herramientas de c√°lculo y dise√±o, combinando las mejores pr√°cticas 
            de la ingenier√≠a con tecnolog√≠a de punta.
            """)
            
            st.subheader("üéØ Misi√≥n")
            st.write("""
            Proporcionar herramientas de an√°lisis estructural profesionales, 
            precisas y f√°ciles de usar, que permitan a los ingenieros y 
            constructores optimizar sus dise√±os y garantizar la seguridad 
            estructural de sus proyectos.
            """)
        
        with col2:
            st.subheader("üåü Visi√≥n")
            st.write("""
            Ser l√≠deres en el desarrollo de software de ingenier√≠a estructural, 
            contribuyendo al avance tecnol√≥gico del sector construcci√≥n y 
            facilitando el trabajo de los profesionales de la ingenier√≠a.
            """)
            
            st.subheader("üíº Servicios")
            st.write("""
            ‚Ä¢ An√°lisis estructural avanzado
            ‚Ä¢ Dise√±o de elementos estructurales
            ‚Ä¢ C√°lculos s√≠smicos seg√∫n E.030
            ‚Ä¢ Dise√±o seg√∫n E.060 y ACI 318-2025
            ‚Ä¢ Generaci√≥n de reportes profesionales
            ‚Ä¢ Consultor√≠a en ingenier√≠a estructural
            """)
        
        st.subheader("üõ†Ô∏è Tecnolog√≠as Utilizadas")
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.markdown("""
            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üêç Python</h4>
                <p>Lenguaje de programaci√≥n principal</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üìä Streamlit</h4>
                <p>Interfaz web interactiva</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div style="background: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üìà Plotly</h4>
                <p>Gr√°ficos interactivos</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.subheader("üìö Normas y Est√°ndares")
        st.write("""
        Nuestro software cumple con las siguientes normas y est√°ndares:
        
        ‚Ä¢ **üáµüá™ Norma E.060** - Concreto Armado (Per√∫)
        ‚Ä¢ **üáµüá™ Norma E.030** - Dise√±o Sismorresistente (Per√∫)
        ‚Ä¢ **üá∫üá∏ ACI 318-2025** - Building Code Requirements for Structural Concrete
        ‚Ä¢ **üá∫üá∏ ASCE 7** - Minimum Design Loads for Buildings and Other Structures
        """)
        
        st.subheader("üìä Versi√≥n del Software")
        st.info("**CONSORCIO DEJ v2.0** - Software de An√°lisis Estructural Profesional")
        st.write("Desarrollado con las √∫ltimas tecnolog√≠as y mejores pr√°cticas de la ingenier√≠a estructural.")
    
    elif opcion == "‚úâÔ∏è Contacto":
        st.title("‚úâÔ∏è Contacto - CONSORCIO DEJ")
        
        st.markdown("""
        <div style="background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); padding: 30px; border-radius: 15px; margin: 20px 0;">
            <h2 style="color: #1e3c72; text-align: center;">üìû Cont√°ctanos</h2>
            <p style="text-align: center; color: #666;">Estamos aqu√≠ para ayudarte con tus proyectos de ingenier√≠a estructural</p>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.subheader("üìß Informaci√≥n de Contacto")
            
            st.markdown("""
            <div style="background: white; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <h4>üìß Email</h4>
                <p><strong>info@consorciodej.com</strong></p>
                <p>Para consultas t√©cnicas y soporte</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style="background: white; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <h4>üì± WhatsApp</h4>
                <p><strong>+51 999 888 777</strong></p>
                <p>Atenci√≥n r√°pida y personalizada</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style="background: white; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <h4>üè¢ Oficina Principal</h4>
                <p><strong>Lima, Per√∫</strong></p>
                <p>Av. Principal 123, San Isidro</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.subheader("üïí Horarios de Atenci√≥n")
            
            st.markdown("""
            <div style="background: white; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <h4>üìÖ Lunes a Viernes</h4>
                <p><strong>8:00 AM - 6:00 PM</strong></p>
                <p>Atenci√≥n presencial y virtual</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style="background: white; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <h4>üìÖ S√°bados</h4>
                <p><strong>9:00 AM - 1:00 PM</strong></p>
                <p>Atenci√≥n virtual √∫nicamente</p>
            </div>
            """, unsafe_allow_html=True)
            
            st.markdown("""
            <div style="background: white; padding: 20px; border-radius: 10px; margin: 15px 0;">
                <h4>üåê Soporte T√©cnico</h4>
                <p><strong>24/7</strong></p>
                <p>Para usuarios premium y empresariales</p>
            </div>
            """, unsafe_allow_html=True)
        
        st.subheader("üìù Formulario de Contacto")
        
        with st.form("contact_form"):
            nombre = st.text_input("Nombre completo", placeholder="Tu nombre completo")
            email = st.text_input("Email", placeholder="tuemail@gmail.com")
            telefono = st.text_input("Tel√©fono", placeholder="+51 999 888 777")
            asunto = st.selectbox("Asunto", ["Consulta General", "Soporte T√©cnico", "Cotizaci√≥n", "Capacitaci√≥n", "Otro"])
            mensaje = st.text_area("Mensaje", placeholder="Describe tu consulta o proyecto...", height=150)
            
            submitted = st.form_submit_button("üì§ Enviar Mensaje", type="primary")
            
            if submitted:
                if nombre and email and mensaje:
                    st.success("‚úÖ Mensaje enviado exitosamente!")
                    st.info("Nos pondremos en contacto contigo en las pr√≥ximas 24 horas.")
                else:
                    st.error("‚ùå Por favor completa todos los campos obligatorios")
        
        st.subheader("üåê Redes Sociales")
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.markdown("""
            <div style="background: #1877f2; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üìò Facebook</h4>
                <p>@ConsorcioDEJ</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col2:
            st.markdown("""
            <div style="background: #1da1f2; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üê¶ Twitter</h4>
                <p>@ConsorcioDEJ</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col3:
            st.markdown("""
            <div style="background: #0077b5; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üíº LinkedIn</h4>
                <p>Consorcio DEJ</p>
            </div>
            """, unsafe_allow_html=True)
        
        with col4:
            st.markdown("""
            <div style="background: #25d366; color: white; padding: 15px; border-radius: 10px; text-align: center; margin: 10px 0;">
                <h4>üì± WhatsApp</h4>
                <p>+51 999 888 777</p>
            </div>
            """, unsafe_allow_html=True)
    
    # Footer profesional
    st.markdown("---")
    st.markdown("""
    <div style="text-align: center; padding: 20px; background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%); border-radius: 10px;">
        <p style="font-weight: bold; color: #1e3c72;">üèóÔ∏è CONSORCIO DEJ - Ingenier√≠a y Construcci√≥n</p>
        <p style="color: #666;">Software de An√°lisis Estructural Profesional</p>
        <p style="font-size: 12px; color: #999;">Desarrollado con Python, Streamlit y Plotly | ACI 318-2025 & E.060</p>
    </div>
    """, unsafe_allow_html=True)